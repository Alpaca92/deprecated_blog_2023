{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/what-is-tsconfig.json/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"9591b1a1-f13a-554e-a288-a5c2aed0935e","excerpt":"ts를 사용하려면 를 사용하여 설정을 해줘야한다 물론 웹팩처럼 next.js, nest.js, CRA를 사용하면 알아서 설정을 해주기 때문에 우리가 설정할 일은 거의 없다 하지만 가끔은 내가 원하는대로 설정을 변경해줘야 될 수도 있고 해당 설정이 어떤 의미를 가지는 정도는 알아야 된다고 생각하여 정리하게 되었다 include Specifies a list of glob patterns that match files to be included in compilation…","html":"<p>ts를 사용하려면 <code class=\"language-text\">tsconfig.json</code>를 사용하여 설정을 해줘야한다</p>\n<p>물론 웹팩처럼 next.js, nest.js, CRA를 사용하면 알아서 설정을 해주기 때문에 우리가 설정할 일은 거의 없다</p>\n<p>하지만 가끔은 내가 원하는대로 설정을 변경해줘야 될 수도 있고 해당 설정이 어떤 의미를 가지는 정도는 알아야 된다고 생각하여 정리하게 되었다</p>\n<h1 id=\"include\" style=\"position:relative;\"><a href=\"#include\" aria-label=\"include permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>include</h1>\n<p><em>Specifies a list of glob patterns that match files to be included in compilation.</em></p>\n<p>컴파일의 대상이 되는 파일 이름 혹은 패턴을 배열로 지정하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"compileroptions\" style=\"position:relative;\"><a href=\"#compileroptions\" aria-label=\"compileroptions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>compilerOptions</h1>\n<p><em>Instructs the TypeScript compiler how to compile .ts files.</em></p>\n<p>.ts파일들의 컴파일 옵션을 설정하는 객체다</p>\n<h2 id=\"outdir\" style=\"position:relative;\"><a href=\"#outdir\" aria-label=\"outdir permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>outDir</h2>\n<p>설정하게 되면 해당 디렉토리로 컴파일된 파일들(<code class=\"language-text\">.js</code>, <code class=\"language-text\">.d.ts</code>, <code class=\"language-text\">.js.map</code> 등)이 들어간다</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"dist\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>컴파일 시 아래와 같은 구조가 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root\n├── dist\n│   └── index.js\n├── index.ts\n└── tsconfig.json</code></pre></div>\n<h2 id=\"target\" style=\"position:relative;\"><a href=\"#target\" aria-label=\"target permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>target</h2>\n<p><em>Set the JavaScript language version for emitted JavaScript and include compatible library declarations.</em></p>\n<p>컴파일 될 js의 버전을 설정한다</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"lib\" style=\"position:relative;\"><a href=\"#lib\" aria-label=\"lib permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lib</h2>\n<p><em>Specify a set of bundled library declaration files that describe the target runtime environment.</em></p>\n<p>ts에게 어떤 API를 사용하고 어떤 환경에서 코드를 실행하는 지를 지정한다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DOM\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그런데 ts는 어떻게 어떤 API를 사용하는지 알 수 있는 걸까?</p>\n<p>이는 <code class=\"language-text\">declaration file</code>을 알아야 한다</p>\n<h1 id=\"declaration-file\" style=\"position:relative;\"><a href=\"#declaration-file\" aria-label=\"declaration file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>declaration file</h1>\n<p>우리는 개발을 할때 직접 모든 기능을 만들기 보다는 많은 프레임워크, 라이브러리를 사용한다</p>\n<p>하지만 이러한 패키지들은 기본적으로 js로 만들어진 경우가 많으며 이를 ts환경에서 사용하기 위해서는 js파일과 모듈을 위한 타입정의가 필요하다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root\n├── src\n│   ├── index.ts\n│   ├── package.js\n│   └── package.d.ts\n└── tsconfig.json</code></pre></div>\n<p>위와 같은 구조라고 할 때 <code class=\"language-text\">package.js</code>가 node_modules안에 있는 어떠한 모듈이라고 가정한다면 <code class=\"language-text\">.d.ts</code>로 해당 모듈을 정의해줘야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 📁./src/package.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> code <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 📁./src/package.d.ts</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Config</span> <span class=\"token punctuation\">{</span>\n  url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">'myPackage'</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> Config<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>code<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>정의한 후에는 정상적으로 사용할 수 있게 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// 📁./src/index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> init<span class=\"token punctuation\">,</span> exit <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'myPackage'</span>\n\n<span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> <span class=\"token string\">'some url'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"jsdoc\" style=\"position:relative;\"><a href=\"#jsdoc\" aria-label=\"jsdoc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSDoc</h1>\n<p>만약 ts와 js를 혼용해서 사용해야하는 경우라면 어떨까?</p>\n<p>모듈의 경우에는 <code class=\"language-text\">.d.ts</code>로 모든 것들의 정의 파일이 작성되어테지만 이전의 나의 프로젝트에 ts를 더하는 거라면 그렇지 않을 것이다</p>\n<p>장기적인 관점에서는 마이그레이션(migration)을 하는 것이 좋지만 일단 몇천줄의 js코드를 당장에 마이그레이션할 순 없지만 일단 ts를 사용하고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"allowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>js를 사용할 수 있게 해주면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root\n├── src\n│   ├── index.ts\n│   ├── package.js\n└── tsconfig.json</code></pre></div>\n<p>(<code class=\"language-text\">.d.ts</code>파일은 모듈의 경우이므로 이 상황에서는 없다)</p>\n<p>allowJs를 true로 하면 이제 js코드를 ts에서 사용할 수 있는데 대부분의 타입들은 추론할 수 없는 것들이므로 any타입으로 되어있다</p>\n<p>js파일에 타입체크를 하기 위해서는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 📁./src/package.js</span>\n\n<span class=\"token comment\">// @ts-check</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> code <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">@ts-check</code>를 추가하고 <a href=\"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html\">JSDoc</a>을 사용하면 된다</p>\n<p>JSDoc의 문법대로 코멘트를 작성하면 ts가 이를 읽고 타입을 추론해준다</p>\n<p>JSDoc은 코멘트로 작성되기 때문에 코드에 추가하더라도 오류가 발생하지 않는다는 장점이 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 📁./src/package.js</span>\n\n<span class=\"token comment\">// @ts-check</span>\n\n<span class=\"token comment\">/**\n * 여기에 코드에 대한 설명을 적는다\n * @param { object } config 파라미터에 대한 설명\n * @param { boolean } config.debug\n * @param { string } config.url\n * @returns { boolean } 리턴값에 대한 설명\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * 여디고 코드에 대한 설명을 적는다\n * @param { number } code 파라미터에 대한 설명\n * @returns { number } 리턴값에 대한 설명\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> code <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"definitelytyped\" style=\"position:relative;\"><a href=\"#definitelytyped\" aria-label=\"definitelytyped permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DefinitelyTyped</h1>\n<p>어떤 패키지를 사용하다보면 <code class=\"language-text\">Cannot find module 'package name' or its corresponding type declarations.</code>라는 에러를 많이 접하게 될텐데 이는 <code class=\"language-text\">.d.ts</code>가 없는 패키지 즉, js로 된 패키지라는 말이다</p>\n<p>이를 해결하기 위해 해당 패키지를 보면서 스스로 <code class=\"language-text\">.d.ts</code>를 작성해야 한다면 패키지를 사용하는 장점히 상당히 희석 될 것이다</p>\n<p>따라서 이를 해결해주기 위해 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped\">DefinitelyTyped</a>가 탄생했다</p>\n<p>이 repository에는 다양한 패키지들의 declaration files가 작성되어 있다</p>\n<p>패키지의 정의 파일을 받아 적용하고 싶다면 아래와 같은 명령을 실행하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># 패키지 다운로드\n$ npm i ${패키지 명}\n\n# 패키지의 정의 파일 다운로드\n$ npm i -D @types/${패키지 명}</code></pre></div>\n<blockquote>\n<p>📌최근에는 처음부터 정의 파일을 포함한 패키지가 많아지고 있기 때문에 해당 오류가 없을 수도 있다</p>\n</blockquote>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*references</h2>\n<ol>\n<li><a href=\"https://nomadcoders.co/typescript-for-beginners\">Typescript로 블록체인 만들기</a></li>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#include\">tsconfig: include</a></li>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#outDir\">tsconfig: outDir</a></li>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#target\">tsconfig: target</a></li>\n<li><a href=\"https://www.typescriptlang.org/tsconfig#lib\">tsconfig: lib</a></li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html\">JSDoc</a></li>\n</ol>","frontmatter":{"title":"tsconfig.json 사용하기","date":"May 26, 2022"}}},"pageContext":{"slug":"/typescript/what-is-tsconfig.json/","previous":{"fields":{"slug":"/typescript/typescript-syntax/"},"frontmatter":{"title":"typescript 기초"}},"next":null}}}