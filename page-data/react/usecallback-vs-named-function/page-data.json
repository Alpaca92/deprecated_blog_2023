{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/usecallback-vs-named-function/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"0cdfb484-0cf1-5d3b-85e9-7d277422956b","excerpt":"Reack Hooks 중 과 일반적인 함수의 차이는 무엇일까? 공식문서를 보면 Pass an inline callback and an array of dependencies. >  will return a memoized version of the callback\nthat only changes if one of the dependencies has changed.\nThis is useful when passing callbacks to optimized child components\nthat…","html":"<p>Reack Hooks 중 <code class=\"language-text\">useCallback</code>과 일반적인 함수의 차이는 무엇일까?</p>\n<p>공식문서를 보면</p>\n<blockquote>\n<p>Pass an inline callback and an array of dependencies.<br /> > <code class=\"language-text\">useCallback</code> will return a memoized version of the callback<br />\nthat only changes if one of the dependencies has changed.<br />\nThis is useful when passing callbacks to optimized child components<br />\nthat rely on reference equality to prevent unnecessary renders<br />\n(e.g. <code class=\"language-text\">shouldComponentUpdate</code>).</p>\n</blockquote>\n<p>‘메모이제이션된 함수를 반환하며, 이 메모이제이션된 함수는 의존성이 변경되었을 때에만 변경된다’고 나와있다</p>\n<p>즉, 불필요한 렌더링을 방지하기 위한 함수를 위한 hooks이다</p>\n<p>그렇다면 모든 함수를 <code class=\"language-text\">useCallback</code>으로 감싸준다면 메모리의 낭비를 최소화하는 것이 아닐까?</p>\n<p>왜 사람들은 모든 함수를 이렇게 사용하지 않는걸까?</p>\n<h1 id=\"함수의-동등비교-이해하기\" style=\"position:relative;\"><a href=\"#%ED%95%A8%EC%88%98%EC%9D%98-%EB%8F%99%EB%93%B1%EB%B9%84%EA%B5%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"함수의 동등비교 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수의 동등비교 이해하기</h1>\n<p><code class=\"language-text\">useCallback</code>을 사용하기 전에 먼저 <code class=\"language-text\">useCallback</code>이 함수가 변경되는 것을 어떻게 알아차리는지에 대해 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> sum1 <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> sum2 <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">sum1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 3</span>\n<span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 3</span>\nsum1 <span class=\"token operator\">===</span> sum2 <span class=\"token comment\">// => false</span>\nsum1 <span class=\"token operator\">===</span> sum1 <span class=\"token comment\">// => true</span></code></pre></div>\n<p><code class=\"language-text\">sum1</code>, <code class=\"language-text\">sum2</code>는 <code class=\"language-text\">factory()</code>에 의해 만들어진 함수지만 이를 동등비교하면 다른 함수 객체인 것을 알 수 있다</p>\n<p>이는 자바스크립트 객체는 자기 자신과 비교할 때에만 true를 return한다는 것을 알 수 있다</p>\n<h1 id=\"usecallback의-목적\" style=\"position:relative;\"><a href=\"#usecallback%EC%9D%98-%EB%AA%A9%EC%A0%81\" aria-label=\"usecallback의 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback()의 목적</h1>\n<p>동일한 코드를 공유하는 서로 다른 함수 객체는 일반적으로 리엑트 컴포넌트 안에서 생성된다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handleClick는 각각의 렌더링에서 재생성된다</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleClick</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicked!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">handleClick</code>은 <code class=\"language-text\">MyComponent</code>가 렌더링 될 때 마다 다른 함수객체가 된다</p>\n<p>하지만 위 예시의 경우 간단한 함수이기 때문에 각 렌더링때마다 함수가 다시 생성되어도 크게 문제되지는 않는다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// handleClick이 동일한 함수 객체를 반환한다</span>\n  <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Clicked!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">useCallback</code>을 사용하여 동일한 함수 인스턴스를 반환하여야 하는 경우는 대개 다음과 같다</p>\n<ol>\n<li>함수형 컴포넌트가 <code class=\"language-text\">React.memo()</code>로 감싸져 있는 경우</li>\n<li>함수가 다른 hooks에 dependency에 들어가 있는 경우<br />\ne.g. <code class=\"language-text\">useEffect(..., [callback])</code></li>\n<li>함수에게 내부 상태가 있는 경우<br />\ne.g. <code class=\"language-text\">debounce</code> 혹은 <code class=\"language-text\">throttle</code> 함수 일 때</li>\n</ol>\n<blockquote>\n<p>📌 <code class=\"language-text\">Debounce</code>, <code class=\"language-text\">Throttle</code></p>\n<p><code class=\"language-text\">Debounce</code>: 이벤트를 그룹화하여 특정시간이 지난 후 하나의 이벤트만 발생하도록 하는 기술<br /> > <em>e.g. resize event를 사용자가 크기를 다 조정한 후에 발생시킴</em></p>\n<p><code class=\"language-text\">Throttle</code>: 이벤트를 일정한 주기마다 발생하도록 하는 기술<br /> > <em>e.g. <code class=\"language-text\">Throttle</code>로 설정한 시간이 1ms라면 해당 이벤트는 1ms에 최대 한번의 이벤트만 발생함</em></p>\n</blockquote>\n<h1 id=\"usecallback의-바람직한-사용방법\" style=\"position:relative;\"><a href=\"#usecallback%EC%9D%98-%EB%B0%94%EB%9E%8C%EC%A7%81%ED%95%9C-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"usecallback의 바람직한 사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback()의 바람직한 사용방법</h1>\n<p>컴포넌트 안에 굉장히 큰 리스트가 있다고 가정해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> useSearch <span class=\"token keyword\">from</span> <span class=\"token string\">'./fetch-items'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyBigList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> term<span class=\"token punctuation\">,</span> onItemClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token function\">useSearch</span><span class=\"token punctuation\">(</span>term<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onItemClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">memo</span><span class=\"token punctuation\">(</span>MyBigList<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이런 경우에는 불필요한 렌더링을 방지하기 위해 <code class=\"language-text\">React.memo()</code>로 감싸주게 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MyParent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> term <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> onItemClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You clicked '</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">[</span>term<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>MyBigList term<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>term<span class=\"token punctuation\">}</span> onItemClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onItemClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">MyBigList</code>는 부모 컴포넌트에서 <code class=\"language-text\">onItemClick</code>을 받게 되는데 이 <code class=\"language-text\">onItemClick</code>은 <code class=\"language-text\">term</code>이 변경되지 않는 한 <code class=\"language-text\">useCallback</code>에 의해 기억된다</p>\n<p>따라서 <code class=\"language-text\">MyParent</code>가 리렌더링되더라도 <code class=\"language-text\">onItemClick</code>함수는 동일하므로 <code class=\"language-text\">useCallback</code>은 메모이제이션 된 값을 변경하지 않는다</p>\n<h1 id=\"usecallback의-잘못된-사용방법\" style=\"position:relative;\"><a href=\"#usecallback%EC%9D%98-%EC%9E%98%EB%AA%BB%EB%90%9C-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"usecallback의 잘못된 사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useCallback()의 잘못된 사용방법</h1>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Contrived use of `useCallback()`</span>\n  <span class=\"token keyword\">const</span> handleClick <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handle the click event</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>MyChild onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">MyChild</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onClick <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token constant\">I</span> am a child<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 예시를 보면 <code class=\"language-text\">dependency</code>가 없는 <code class=\"language-text\">useCallback</code>을 사용하고 있다</p>\n<p><code class=\"language-text\">MyComponent</code>가 렌더링 될때마다 <code class=\"language-text\">useCallback</code>이 호출되고 <code class=\"language-text\">useCallback</code>이 동일한 함수객체를 반환한다</p>\n<p>이 경우에는 성능적 이슈가 개선되는 것 보다는 코드의 복잡성만 증가한 셈이다</p>\n<p>최적화를 하기 위해서도 결국 자원이 필요하기 때문에 이 자원의 크기가 쓸데없이 커지지않도록 주의하여야 한다</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*references</h2>\n<ol>\n<li><a href=\"https://ko.reactjs.org/docs/hooks-reference.html#usecallback\">Hooks API Reference : useCallback</a></li>\n<li><a href=\"https://stackoverflow.com/questions/58130067/usecallback-vs-simple-function\">useCallback vs simple function</a></li>\n<li><a href=\"https://dmitripavlutin.com/dont-overuse-react-usecallback/\">Your Guide to React.useCallback()</a></li>\n<li><a href=\"https://velog.io/@yes3427/Debounce-and-Throttle\">디바운스(Debounce)와 스로틀(Throttle) 차이점</a></li>\n<li><a href=\"https://dmitripavlutin.com/react-throttle-debounce/#2-debouncing-a-callback-the-first-attempt\">How to Correctly Debounce and Throttle Callbacks in React</a></li>\n<li><a href=\"https://stackoverflow.com/questions/57294549/react-hook-usecallback-without-dependencies\">React hook useCallback without dependencies</a></li>\n</ol>","frontmatter":{"title":"useCallback vs named function","date":"June 28, 2022"}}},"pageContext":{"slug":"/react/usecallback-vs-named-function/","previous":{"fields":{"slug":"/dev/install-zsh-on-windows-10/"},"frontmatter":{"title":"윈도우에서 zsh 설치하기"}},"next":{"fields":{"slug":"/dev/what-is-pwa/"},"frontmatter":{"title":"PWA(Progressive Web App)이란?"}}}}}