{"componentChunkName":"component---src-templates-blog-post-js","path":"/git/git의-모든-것---03/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"5e4c70cc-5ea9-5162-a659-961ff24bc452","excerpt":"커밋 히스토리 조회하기 기본적인 히스토리 조회 방법은 가 있다 원하는 내용들만을 출력하고 싶을 때에는 옵션을 사용하면 된다 여기서 는 커밋해시 7자리, 은 저자 이름, 은 저자가 커밋한 시각, 는 커밋 메세지 요약(제목)을 의미한다 ✔ 더 많은 옵션을 보고싶다면 여기를 참고하도록 하자 에는 다양한 flag들이 있는데 그 중에 가장 유용한 flag중 하나가  flag…","html":"<h1 id=\"커밋-히스토리-조회하기\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%B0%8B-%ED%9E%88%EC%8A%A4%ED%86%A0%EB%A6%AC-%EC%A1%B0%ED%9A%8C%ED%95%98%EA%B8%B0\" aria-label=\"커밋 히스토리 조회하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커밋 히스토리 조회하기</h1>\n<p>기본적인 히스토리 조회 방법은 <code class=\"language-text\">$ git log</code>가 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git log\ncommit ca82a6dff817ec66f44342007202690a93763949\nAuthor: Scott Chacon &lt;schacon@gee-mail.com&gt;\nDate:   Mon Mar 17 21:52:11 2008 -0700\n\n    changed the version number\n\ncommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\nAuthor: Scott Chacon &lt;schacon@gee-mail.com&gt;\nDate:   Sat Mar 15 16:40:33 2008 -0700\n\n    removed unnecessary test\n\ncommit a11bef06a3f659402fe7563abf99ad00de2209e6\nAuthor: Scott Chacon &lt;schacon@gee-mail.com&gt;\nDate:   Sat Mar 15 10:31:28 2008 -0700\n\n    first commit</code></pre></div>\n<p>원하는 내용들만을 출력하고 싶을 때에는 <code class=\"language-text\">--pretty-format</code>옵션을 사용하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git log --pretty=format:&quot;%h - %an, %ar : %s&quot;\nca82a6d - Scott Chacon, 6 years ago : changed the version number\n085bb3b - Scott Chacon, 6 years ago : removed unnecessary test\na11bef0 - Scott Chacon, 6 years ago : first commit</code></pre></div>\n<p>여기서 <code class=\"language-text\">%h</code>는 커밋해시 7자리, <code class=\"language-text\">%an</code>은 저자 이름, <code class=\"language-text\">%ar</code>은 저자가 커밋한 시각, <code class=\"language-text\">%s</code>는 커밋 메세지 요약(제목)을 의미한다</p>\n<blockquote>\n<p>✔ 더 많은 옵션을 보고싶다면 <a href=\"https://git-scm.com/docs/pretty-formats\">여기</a>를 참고하도록 하자</p>\n</blockquote>\n<p><code class=\"language-text\">$ git log</code>에는 다양한 flag들이 있는데 그 중에 가장 유용한 flag중 하나가 <code class=\"language-text\">-S</code> flag다</p>\n<p>이 옵션은 코드에서 추가되거나 제거된 내용 중 특정 텍스트가 포함되어 있는지를 검색한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git log -S function_name</code></pre></div>\n<h1 id=\"되돌리기\" style=\"position:relative;\"><a href=\"#%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0\" aria-label=\"되돌리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>되돌리기</h1>\n<h2 id=\"커밋-수정하기\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%B0%8B-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"커밋 수정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커밋 수정하기</h2>\n<p>종종 완료된 커밋을 수정해야 할때가 생긴다</p>\n<p>이 때 사용하는 것이 <code class=\"language-text\">--amend</code> 옵션이다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git commit --amend</code></pre></div>\n<p>이 명령은 staging area를 사용하여 커밋한다</p>\n<p>따라서 커밋을 하자마자 사용한다면 커밋메세지만 변경하는 명령이 되고 또 다른 파일들을 add했다면 그 파일들까지 같이 커밋되면서 커밋메세지가 수정된다</p>\n<h2 id=\"파일-상태를-unstaged로-변경하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%83%81%ED%83%9C%EB%A5%BC-unstaged%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"파일 상태를 unstaged로 변경하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 상태를 unstaged로 변경하기</h2>\n<p>두 개의 파일을 따로 커밋하고 싶었는데 <code class=\"language-text\">$ git add .</code>를 통해 둘 다 staging area에 들어가 버렸을 때는 어떻게 해야할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git add .\n$ git status\nOn branch master Changes to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     renamed:    README.md -&gt; README\n     modified:   CONTRIBUTING.md</code></pre></div>\n<p>아래 괄호에 <code class=\"language-text\">$ git reset HEAD &lt;file>...</code>를 사용하면 unstaged로 만들 수 있다고 나와있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git reset HEAD CONTRIBUTING.md\nUnstaged changes after reset:\nM   CONTRIBUTING.md\n\n$ git status\nOn branch master Changes to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n    renamed:    README.md -&gt; README\n\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md</code></pre></div>\n<blockquote>\n<p>⚠ <code class=\"language-text\">git reset</code>은 조심해서 사용해야 한다<br />\n특히 <code class=\"language-text\">--hard</code>옵션을 사용하면 더 위험한데 이 부분에 대해서는 나중에 좀 더 자세히 다루도록 하자</p>\n</blockquote>\n<h2 id=\"modified-파일-되돌리기\" style=\"position:relative;\"><a href=\"#modified-%ED%8C%8C%EC%9D%BC-%EB%90%98%EB%8F%8C%EB%A6%AC%EA%B8%B0\" aria-label=\"modified 파일 되돌리기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>modified 파일 되돌리기</h2>\n<p>수정된 파일을 어떻게 하면 되돌릴 수 있을까?</p>\n<p>가장 간단한 방법으로는 <code class=\"language-text\">ctrl + z</code>를 연타하는 것이다</p>\n<p>하지만 git을 사용하면 좀 더 세련된 방법으로 되돌릴 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git status\nOn branch master Changes to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n    renamed:    README.md -&gt; README\n\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md</code></pre></div>\n<p>위 메세지는 꽤 구체적인 방법을 알려준다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout -- CONTRIBUTING.md $ git status\nOn branch master Changes to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     renamed:    README.md -&gt; README</code></pre></div>\n<blockquote>\n<p>⚠ <code class=\"language-text\">git checkout - [file]</code> 명령은 꽤 위험한 명령이다<br />\n원래 파일로 덮어쓰기 때문에 수정한 내용이 전부 사라지고 복원할 수 없다</p>\n</blockquote>\n<p>변경한 내용을 쉽게 버릴 수 없고 당장은 되돌리고 싶을 때에는 <code class=\"language-text\">stash</code>, <code class=\"language-text\">branch</code>를 사용하는 것이 좋다</p>\n<p>이에 대해서는 나중에 좀 더 구체적으로 다뤄보자</p>","frontmatter":{"title":"git의 모든 것 - 3","date":"May 09, 2022"}}},"pageContext":{"slug":"/git/git의-모든-것---03/","previous":{"fields":{"slug":"/git/git의-모든-것---02/"},"frontmatter":{"title":"git의 모든 것 - 2"}},"next":{"fields":{"slug":"/git/git의-모든-것---04/"},"frontmatter":{"title":"git의 모든 것 - 4"}}}}}