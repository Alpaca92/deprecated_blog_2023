{"componentChunkName":"component---src-templates-blog-post-js","path":"/git/git의-모든-것---06/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"bc948fef-cd97-5bec-a6f6-abbc40d42d9e","excerpt":"git alias 명렁을 전부 입력해서 사용하기 귀찮을 때 사용하는게 다 이제 다음과 같이 동작한다 한결 명령어를 사용하기 편해졌다 git을 설치하면 가 함께 설치되는데 기본적으로 되어있는 단축어를 볼 수 있다 내 경우에는 를 사용하지 않고 을 직접 수정하여 단축어를 관리하고 있다 📌 의 위치는 Git…","html":"<h1 id=\"git-alias\" style=\"position:relative;\"><a href=\"#git-alias\" aria-label=\"git alias permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git alias</h1>\n<p>명렁을 전부 입력해서 사용하기 귀찮을 때 사용하는게 <code class=\"language-text\">alias</code>다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git config --global alias.co checkout\n$ git config --global alias.br branch\n$ git config --global alias.ci commit\n$ git config --global alias.st status</code></pre></div>\n<p>이제 다음과 같이 동작한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git co test\n\n# 실제 동작하는 코드\n$ git checkout test</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git st\n\n# 실제 동작하는 코드\n$ git status</code></pre></div>\n<p>한결 명령어를 사용하기 편해졌다</p>\n<p>git을 설치하면 <code class=\"language-text\">git bash</code>가 함께 설치되는데 기본적으로 되어있는 단축어를 볼 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ alias</code></pre></div>\n<p>내 경우에는 <code class=\"language-text\">$ git config</code>를 사용하지 않고 <code class=\"language-text\">alias.sh</code>을 직접 수정하여 단축어를 관리하고 있다</p>\n<blockquote>\n<p>📌 <code class=\"language-text\">alias.sh</code>의 위치는 Git 디렉토리를 살펴보면 된다<br />\n(내 경우에는 <code class=\"language-text\">c/Program Files/Git/etc/profile.d/aliases.sh</code>에 있었다)</p>\n</blockquote>\n<p>이를 수정하기 편하기 위해서 나는 아래와 같은 단축어를 추가하였다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># 📁c/Program Files/Git/etc/profile.d/aliases.sh\n\nalias mod_alias=&quot;code /c/&#39;Program Files&#39;/Git/etc/profile.d/aliases.sh&quot;</code></pre></div>\n<p>위와 같이 단축어를 추가하고 싶다면 <code class=\"language-text\">alias ${단축어}=\"${실제 명령}\"</code>으로 추가하면 된다</p>\n<h1 id=\"브랜치\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98\" aria-label=\"브랜치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치</h1>\n<p>개발을 하다 보면 코드를 여러 개로 복사해야 하는 일이 자주 생긴다</p>\n<p>코드를 통째로 복사하고 나서 원래 코드와는 상관없이 독립적으로 개발을 진행할 수 있는데, 이렇게 독립적으로 개발하는 것이 <strong>브랜치</strong>다</p>\n<h2 id=\"브랜치란-무엇인가\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"브랜치란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치란 무엇인가</h2>\n<p>git이 브랜치를 다루는 과정을 이해하기 위해 git이 데이터를 어떻게 저장하는지에 대해 알아보도록 하자</p>\n<p>git은 데이터의 변경사항(diff)을 기록하지 않고 일련의 스냅샷으로 기록한다</p>\n<p>커밋하면 git은 현 staging area에 있는 데이터의 스냅샷에 대한 포인터, 저자나 커밋 메세지 같은 메타데이터, 이전 커밋에 대한 포인터 등을 포함하는 commit object를 저장한다</p>\n<p>파일이 3개 있는 디렉토리가 하나 있고 이 파일을 staging area에 저장하고 커밋하는 예제를 살펴보자<br />\n(디렉토리의 구조는 아래와 같다)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">📁example directory\n  ├ README\n  ├ test.rb\n  └ LICENSE</code></pre></div>\n<p>파일을 staged하면 git 저장소에 파일을 저장하고(이를 git에서는 <code class=\"language-text\">Blob</code>이라고 부른다) staging area에 해당 파일의 체크섬을 저장한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git add .\n$ git commit -m &#39;The initial commit of my project&#39;</code></pre></div>\n<p><code class=\"language-text\">$ git commit</code>으로 커밋하면 먼저 루트 디렉토리와 각 하위 디렉토리의 트리 객체를 체크섬과 함께 저장소에 저장한다</p>\n<p>그 다음에 커밋 객체를 만들고 메타데이터와 루트 디렉토리 트리 객체를 가리키는 포인터 정보를 커밋 객체에 넣어 저장한다<br />\n(그래서 스냅샷을 언제든지 필요할 때 다시 만들 수 있는 것이다)</p>\n<p>이 작업을 마치고 나면 git에는 5개의 데이터 객체가 생긴다</p>\n<ol>\n<li>각 파일에 대한 Blob 3개(README, test.rb, LICENSE)</li>\n<li>파일과 디렉토리 구조가 들어있는 트리 객체</li>\n<li>메타데이터와 루트 트리를 가리키는 포인터가 담긴 커밋 객체</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_02.png\" alt=\"commit, tree data\"></p>\n<p>다시 수정하고 커밋을 하면 아래와 같이 이전 커밋을 parent에 저장한다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_03.png\" alt=\"commit, before commit\"></p>\n<p><code class=\"language-text\">$ git init</code>읋 하면 자동적으로 master 브랜치를 만드는데 이름이 master라고 해서 추가되는 브랜치들과 다른점은 없다</p>\n<p>처음 커밋을 하게되면 이 master 브랜치가 생성된 커밋을 가리키고 이후에는 최종커밋(가장 최근에 한 커밋)을 자동으로 가리킨다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_04.png\" alt=\"branch, commit history\"></p>\n<h2 id=\"새-브랜치-생성하기\" style=\"position:relative;\"><a href=\"#%EC%83%88-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"새 브랜치 생성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새 브랜치 생성하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git branch testing</code></pre></div>\n<p>이제 <code class=\"language-text\">testing</code>이라는 이름의 브랜치가 하나 생성됐다</p>\n<p>이 브랜치도 지금 작업하고 있던 마지막 커밋을 가리키고 있다</p>\n<p>git은 지금 작업중인 브랜치를 어떻게 파악할 수 있는걸까?</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git log</code></pre></div>\n<p>커밋한 이력을 보면 항상 <code class=\"language-text\">HEAD</code>라는게 보인다</p>\n<p>이 <code class=\"language-text\">HEAD</code>라는 특수한 포인터는 지금 작업하는 로컬브랜치를 가리킨다</p>\n<h2 id=\"브랜치-이동하기\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%9D%B4%EB%8F%99%ED%95%98%EA%B8%B0\" aria-label=\"브랜치 이동하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치 이동하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout testing</code></pre></div>\n<p>이제 testing 브랜치로 이동이 되었고 <code class=\"language-text\">HEAD</code> 포인터 또한 testing을 가리킨다</p>\n<p>이제 여기서 새로 커밋을 하게 되면 다음과 같아진다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_05.png\" alt=\"HEAD가 가리키는 testing 브랜치가 새 커밋을 가리킴\"></p>\n<p>다시 master로 돌아오면 <code class=\"language-text\">HEAD</code>는 아래와 같이 이동하게 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout master</code></pre></div>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_06.png\" alt=\"HEAD가 Checkout 한 브랜치로 이동함\"></p>\n<p>워킹디렉토리의 파일도 <code class=\"language-text\">f30ab</code> 커밋 시점으로 돌아갔다</p>\n<p>이렇게 브랜치 작업을 하다 시각적으로 확인하고 싶다면 아래의 명령을 실행해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git log --oneline --decorate --graph --all\n* c2b9e (HEAD, master) made other changes | * 87ab2 (testing) made a change\n|/\n* f30ab add feature #32 - ability to add new formats to the\n* 34ac2 fixed bug #1328 - stack overflow under certain conditions * 98ca9 initial commit of my project</code></pre></div>\n<blockquote>\n<p>📌 <code class=\"language-text\">$ git checkout -b ${브랜치 명}</code>을 통해 브랜치의 생성과 이동을 한번에 할 수 있다</p>\n</blockquote>\n<h2 id=\"merge의-기초\" style=\"position:relative;\"><a href=\"#merge%EC%9D%98-%EA%B8%B0%EC%B4%88\" aria-label=\"merge의 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Merge의 기초</h2>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_06.png\" alt=\"master와 별개로 진행하는 iss53 브랜치\"></p>\n<p>브랜치와 커밋상황이 위와 같을 때 iss53 브랜치를 master 브랜치에 합치고 싶다면 머지 명령을 하면된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout master\nSwitched to branch &#39;master&#39;\n\n$ git merge iss53\nMerge made by the &#39;recursive&#39; strategy.\nindex.html |    1 +\n1 file changed, 1 insertion(+)</code></pre></div>\n<p>이때 git은 3-way merge를 한다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_07.png\" alt=\"커밋 3개를 Merge\"></p>\n<p>이는 단순히 브랜치 포인터를 최신 커밋으로 옮기는 것이 아니라 3-way merge의 결과를 별도의 커밋으로 만든다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_07.png\" alt=\"Merge 커밋\"></p>\n<h2 id=\"충돌의-기초\" style=\"position:relative;\"><a href=\"#%EC%B6%A9%EB%8F%8C%EC%9D%98-%EA%B8%B0%EC%B4%88\" aria-label=\"충돌의 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>충돌의 기초</h2>\n<p>머지가 순조롭게 되지 않을 때도 있는데 이를 충돌(comflict)이라고 한다</p>\n<p>충돌되는 이유는 일반적으로 머지하는 두 브랜치에서 같은 파일의 한 부분을 동시에 수정하고 머지하려고 하기 때문이다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git merge iss53\nAuto-merging index.html\nCONFLICT (content): Merge conflict in index.html\nAutomatic merge failed; fix conflicts and then commit the result.</code></pre></div>\n<p>git이 자동으로 머지를 하지 못해 새 커밋도 생기지 못했다</p>\n<p>이렇게 충돌이 발생했을 때 어떤 파일을 머지할 수 없었는지는 <code class=\"language-text\">$ git status</code>로 확인할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git status\nOn branch master\nYou have unmerged paths.\n  (fix conflicts and run &quot;git commit&quot;)\n\nUnmerged paths:\n  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)\n\n     both modified:      index.html\n\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre></div>\n<p>충돌이 일어난 파일은 <strong>unmerged</strong>에 표시되고 충돌된 부분은 아래와 같이 표시된다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html\n&lt;div id=\"footer\">contact : email.support@github.com&lt;/div> =======\n&lt;div id=\"footer\">\n please contact us at support@github.com &lt;/div>\n>>>>>>> iss53:index.html</code></pre></div>\n<p>=======위쪽의 내용은 HEAD 버전(위의 예시에서는 master)의 내용이고 아래쪽이 iss53버전임을 알 수 있다</p>\n<p>충돌을 해결하려면 위쪽과 아래쪽 중 하나를 선택하거나 새로 작성하여 머지를 해줘야 한다</p>\n<h2 id=\"브랜치-관리\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98-%EA%B4%80%EB%A6%AC\" aria-label=\"브랜치 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치 관리</h2>\n<p>merge 유무를 간단한 명령으로 확인할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git branch --merged\n  iss53\n* master\n\n$ git branch --no-merged\n  testing</code></pre></div>\n<p>아직 머지되지 않은 브랜치를 삭제하려 할 때에는 삭제가 되지 않는다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git branch -d testing\nerror: The branch &#39;testing&#39; is not fully merged.\nIf you are sure you want to delete it, run &#39;git branch -D testing&#39;.</code></pre></div>\n<blockquote>\n<p>📌 머지하지 않은 브랜치를 강제로 삭제할 때에는 <code class=\"language-text\">$ git branch -D ${브랜치 명}</code>명령으로 삭제하면 된다</p>\n</blockquote>\n<h2 id=\"리모트-브랜치\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%AA%A8%ED%8A%B8-%EB%B8%8C%EB%9E%9C%EC%B9%98\" aria-label=\"리모트 브랜치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리모트 브랜치</h2>\n<p>리모트 refs는 리모트 저장소에 있는 포인터인 레퍼런스다<br />\n(리모트 저장소에 있는 브랜치, 태그 등을 의미한다)</p>\n<p><code class=\"language-text\">$ git ls-remote ${리모트 명}</code>명령으로 모든 리모트 refs를 조회할 수 있다</p>\n<p><code class=\"language-text\">$ git remote show ${리모트 명}</code>명렁은 모든 리모트 브랜치와 그 정보를 보여준다</p>\n<p>리모트 refs가 있지만 보통 <strong>리모트 트래킹 브랜치</strong>를 사용한다</p>\n<p><strong>리모트 트래킹 브랜치</strong>는 리모트 브랜치를 추적하는 레퍼런스이며 브랜치다</p>\n<p><strong>리모트 트래킹 브랜치</strong>는 로컬에 있으며 리모트 서버에 연결할 때마다 리모트의 브랜치 업데이트 내용에 따라 자동으로 갱신될 뿐 임의로 움질일 수는 없다</p>\n<p>리모트 저장소에 마지막으로 연결했던 순간에 브랜치가 무슨 커밋을 가리키고 있었는지를 나타낸다</p>\n<p><strong>리모트 트래킹 브랜치</strong>의 이름은 <code class=\"language-text\">${리모트 명}/${브랜치 명}</code>형식으로 되어있다</p>\n<p>예를 들어 리모트 저장소 origin의 master브랜치를 보고 싶다면 <code class=\"language-text\">origin/master</code>라는 이름으로 브랜치를 확인하면 된다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_10.png\" alt=\"Clone 이후 서버와 로컬의 master 브랜치\"></p>\n<p>로컬 저장소에서 작업을 하고있는데 다른 팀원이 해당 소스에 push를 하고 master 브랜치를 업데이트 한다면 아래와 같을 것이다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_11.png\" alt=\"로컬과 서버의 커밋 히스토리는 독립적임\"></p>\n<p>리모트 저장소와 어떠한 데이터도 주고 받지 않았기 때문에 origin/master 포인터는 그 자리 그대로 있다</p>\n<p>리모트 서버로 부터 저장소를 동기화 하기 위해서는 <code class=\"language-text\">$ git fetch origin</code>을 사용하면 된다</p>\n<p>이 명령을 실행하면 먼저 origin서버의 주소 정보(위 그림에서는 <code class=\"language-text\">git.ourcompany.com</code>)을 찾아 현재 로컬 저장소가 갖고있지 않은 새로운 정보가 있으면 모두 내려받고</p>\n<p>받은 데이터를 로컬 저장소에 업데이트하고 origin/master 포인터를 최신커밋 위치로 이동시킨다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_12.png\" alt=\"git fetch명령은 리모트 브랜치 정보를 업데이트\"></p>\n<h2 id=\"push-하기\" style=\"position:relative;\"><a href=\"#push-%ED%95%98%EA%B8%B0\" aria-label=\"push 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>push 하기</h2>\n<p>로컬의 브랜치를 서버로 전송하려면 쓰기 권한이 있는 리모트 저장소에 push 해야 한다</p>\n<p>push 명령은 <code class=\"language-text\">$ git push ${리모트 명} ${브랜치 명}</code>으로 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git push origin serverfix\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/schacon/simplegit\n\n * [new branch]      serverfix -&gt; serverfi</code></pre></div>\n<p>git은 serverfix라는 브랜치 이름을 <code class=\"language-text\">refs/heads/serverfix:refs/heads/serverfix</code>로 확장한다</p>\n<p>이는 serverfix라는 로컬 브랜치를 serverfix 리모트 브랜치에 push(업데이트)한다는 것을 의미한다</p>\n<p>로컬 브랜치의 이름과 리모트 브랜치의 이름이 다를 경우에는 <code class=\"language-text\">$ git push origin serverfix:anotherbranch</code>처럼 사용하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0) Unpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n\n * [new branch]      serverfix    -&gt; origin/serverfix</code></pre></div>\n<p>여기서 짚고 넘어가야할 부분이 있는데 fetch 명렁으로 <strong>리모트 트래킹 브랜치</strong>를 내려받는다해도 로컬 저장소에 수정할 수 있는 브랜치가 새로 생기는 것은 아니다</p>\n<p>다시 말해 serverfix라는 브랜치가 생기는 것이 아니라 그저 수정 못 하는 origin/serverfix브랜치 포인터가 생기는 것이다</p>\n<p>새로 받은 브랜치의 내용을 머지하려면 <code class=\"language-text\">$ git merge origin/serverfix</code>명령을 사용한다</p>\n<p><strong>리모트 트래킹 브랜치</strong>에서 시작하는 새 브랜치를 만들려면</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch &#39;serverfix&#39;</code></pre></div>\n<p>위와 같은 명령어를 사용하면 된다</p>\n<h2 id=\"브랜치-추적\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%B6%94%EC%A0%81\" aria-label=\"브랜치 추적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브랜치 추적</h2>\n<p><strong>리모트 트래킹 브랜치</strong>를 로컬 브랜치로 checkout하면 자동으로 “트래킹 브랜치”가 만들어진다<br />\n(트래킹하는 대상 브랜치를 “upstream branch”라고 부른다)</p>\n<p>트래킹 브랜치는 리모트 브랜치와 직접적인 연결고리가 있는 로컬 브랜치로 <code class=\"language-text\">$ git pull</code>명령으로 리모트 저장소로부터 데이터를 내려받아 연결된 리모트 브랜치와 자동으로 머지한다</p>\n<p>추적 브랜치의 설정을 알고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets\n  master    1ae2a45 [origin/master] deploying index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it\n  testing   5ea463a trying something new</code></pre></div>\n<p>위와 같은 명령어를 사용하면 되는데 예를 들어 iss53 브랜치의 경우 현재 2개의 추적 브랜치가 있다는 것을 알 수 있다</p>\n<p>여기서 <code class=\"language-text\">ahead</code>는 서버로 보내지 않은 커밋의 갯수를 말하며, 반대로 <code class=\"language-text\">behind</code>는 서버 브랜치에서 아직 로컬 브랜치로 머지하지 않은 커밋의 갯수를 말한다</p>\n<h2 id=\"pull-하기\" style=\"position:relative;\"><a href=\"#pull-%ED%95%98%EA%B8%B0\" aria-label=\"pull 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pull 하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git fetch origin\n$ git merge origin/master</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git pull origin master</code></pre></div>\n<p>위의 두 명령은 같은 결과를 가져오지만 일반적으로 전자를 사용하는 것이 좋다</p>\n<h1 id=\"rebase-하기\" style=\"position:relative;\"><a href=\"#rebase-%ED%95%98%EA%B8%B0\" aria-label=\"rebase 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rebase 하기</h1>\n<p>git에서 한 브랜치를 다른 브랜치르 합치는 방법은 merge와 rebase가 있다</p>\n<p>rebase의 장단점 및 merge와의 차이점을 살펴보자</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_13.png\" alt=\"나뉜 브랜치를 Merge 하기\"></p>\n<p>merge의 경우 일반적으로 위와 같이 3-way merge가 이뤄지는데 rebase의 경우는 조금 다르다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_14.png\" alt=\"C4의 변경사항을 C3에 적용하는 Rebase 과정\"></p>\n<p>두 브랜치가 나눠지기 전인 공통 커밋으로 이동하여 그 커밋으로 부터 지금 checkout된 브랜치가 가리키는 커밋까지 diff를 만들어 어딘가에 임시 저장한다(그림에서는 <code class=\"language-text\">C4</code>)</p>\n<p>rebase 할 브랜치(experiment)가 합칠 브랜치(master)가 가리키는 커밋을 가리키게 하고 아까 저장해뒀던 변경사항을 차례로 적용한다</p>\n<p>그리고 아래와 같이 master 브랜치를 fast-forward하면 끝이다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_15.png\" alt=\"master 브랜치를 Fast-forward시키기\"></p>\n<p>위 설명을 명령화하면 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git checkout experiment\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: added staged command\n\n$ git checkout master\n$ git merge experiment</code></pre></div>\n<p>rebase의 경우 좀 더 깔끔하게 커밋 히스토리를 관리 할 수 있다</p>\n<p>이렇듯 rebase는 브랜치의 변경사항을 순서대로 다른 브랜치에 적용하면서 합치고,<br />\nmerge는 두 브랜치의 최종 결과만을 가지고 새로운 커밋을 만들어내면서 합친다</p>\n<p>또 다른 경우를 보면</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_16.png\" alt=\"다른 토픽 브랜치에서 갈라져 나온 토픽 브랜치\"></p>\n<p>브랜치에서 브랜치를 다시 분기하여 조금 복잡한 경우 이때 위의 그림에서 client를 master로 합치고 싶을 경우도 rebase를 사용한다</p>\n<p>이를 합치고 fast-forward merge를 해주면 아래와 같은 그림이 되고</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/evrth_of_git_17.png\" alt=\"master 브랜치를 client 브랜치 위치로 진행 시키기\"></p>\n<p>이를 명령화하면 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git rebase --onto master server client\n$ git checkout master\n$ git merge client</code></pre></div>\n<p><code class=\"language-text\">$ git rebase --onto master server client</code> 명령은 master, server, client 세 브랜치의 공통 조상까지의 커밋을 client 브랜치에서 없애준다</p>\n<h2 id=\"rebase의-위험성\" style=\"position:relative;\"><a href=\"#rebase%EC%9D%98-%EC%9C%84%ED%97%98%EC%84%B1\" aria-label=\"rebase의 위험성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rebase의 위험성</h2>\n<p><code class=\"language-text\">$ git rebase</code>로 push를 해버리면 다른 팀원들은 다시 한번 머지를 진행한 후 push를 해야한다</p>\n<p>이는 쓸데 없는 워크플로우가 더 생기는 것이므로 협업을 할때에 rebase의 사용은 삼가해야 한다</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*references</h2>\n<ol>\n<li><a href=\"https://merrily-code.tistory.com/124\">[번역] : Git fetch와 pull, pull은 이제 그만!</a></li>\n</ol>","frontmatter":{"title":"git의 모든 것 - 6","date":"May 10, 2022"}}},"pageContext":{"slug":"/git/git의-모든-것---06/","previous":{"fields":{"slug":"/books/네-개의-서명(셜록홈즈-전집-2권)/"},"frontmatter":{"title":"네 개의 서명(셜록홈즈 전집 2권)"}},"next":{"fields":{"slug":"/git/git의-모든-것---05/"},"frontmatter":{"title":"git의 모든 것 - 5"}}}}}