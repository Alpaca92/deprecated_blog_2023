{"componentChunkName":"component---src-templates-blog-post-js","path":"/git/git의-모든-것--1/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"61d0d7fa-9ddf-5aee-93e1-28e900ff99ff","excerpt":"git에 대한 심도있는 공부가 필요한 것 같아 Pro git을 다운받았다 여기서 읽은 내용을 바탕으로 git에 대해 정리해보려 한다 Git의 무결성 git은 데이터를 저장하기 전에 항상 체크섬을 구하고 그 체크섬으로 데이터를 관리한다 이 체크섬은 를 사용하여 만들며 40자 길이의 16진수를 사용한다 ex. 24b9da6552252987aa493b52f8696cd6d3b00373 Git의 세 가지 상태 git…","html":"<p>git에 대한 심도있는 공부가 필요한 것 같아 <a href=\"https://git-scm.com/book/ko/v2\">Pro git</a>을 다운받았다</p>\n<p>여기서 읽은 내용을 바탕으로 git에 대해 정리해보려 한다</p>\n<h1 id=\"git의-무결성\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EB%AC%B4%EA%B2%B0%EC%84%B1\" aria-label=\"git의 무결성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 무결성</h1>\n<p>git은 데이터를 저장하기 전에 항상 체크섬을 구하고 그 체크섬으로 데이터를 관리한다</p>\n<p>이 체크섬은 <code class=\"language-text\">SHA-1 hash</code>를 사용하여 만들며 40자 길이의 16진수를 사용한다</p>\n<blockquote>\n<p>ex. 24b9da6552252987aa493b52f8696cd6d3b00373</p>\n</blockquote>\n<h1 id=\"git의-세-가지-상태\" style=\"position:relative;\"><a href=\"#git%EC%9D%98-%EC%84%B8-%EA%B0%80%EC%A7%80-%EC%83%81%ED%83%9C\" aria-label=\"git의 세 가지 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git의 세 가지 상태</h1>\n<p>git은 <code class=\"language-text\">committed</code>, <code class=\"language-text\">modified</code>, <code class=\"language-text\">staged</code>의 세 가지 상태로 구분되는데</p>\n<ol>\n<li><code class=\"language-text\">committed</code> : 데이터가 로컬 데이터베이스에 안전하게 저장되었음</li>\n<li><code class=\"language-text\">modified</code> : 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않음</li>\n<li><code class=\"language-text\">staged</code> : 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/git/images/all_of_git_01.png\" alt=\"working tree, staging area, git directory\"></p>\n<p>git 디렉토리는 git이 프로젝트의 메타데이터와 객체 데이터베이스를 저장하는 곳이다</p>\n<p>git 디렉토리에 있는 파일들은 <code class=\"language-text\">committed</code> 상태이다</p>\n<p>파일을 수정하고 <code class=\"language-text\">staging area</code>에 추가했다면 <code class=\"language-text\">staged</code>다</p>\n<p>checkout하고 나서 수정은 했지만 아직 <code class=\"language-text\">staging area</code>에 추가하지 않았다면 <code class=\"language-text\">modified</code>다</p>\n<blockquote>\n<p>📌 <code class=\"language-text\">$ git add</code>와 <code class=\"language-text\">$ git commit</code>을 하면 git 디렉토리로 들어가게 된다</p>\n</blockquote>\n<h1 id=\"git-최초-설정\" style=\"position:relative;\"><a href=\"#git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95\" aria-label=\"git 최초 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git 최초 설정</h1>\n<p><code class=\"language-text\">git config</code>라는 도구로 설정 내용을 확인하고 변경할 수 있는데 이때 사용되는 설정파일은 세 가지로 나뉜다</p>\n<ol>\n<li><code class=\"language-text\">/etc/gitconfig</code> : 시스템의 모든 사용자와 모든 저장소에 적용되는 설정이다</li>\n</ol>\n<blockquote>\n<p><code class=\"language-text\">git config --system</code>옵션으로 이 파일을 읽고 쓸 수 있다</p>\n</blockquote>\n<ol start=\"2\">\n<li><code class=\"language-text\">~/.gitconfig</code>, <code class=\"language-text\">~/.config/git/config</code> : 특정 사용자(현재 사용자)에게만 적용되는 설정이다</li>\n</ol>\n<blockquote>\n<p><code class=\"language-text\">git config --global</code>옵션으로 이 파일을 읽고 쓸 수 있다</p>\n</blockquote>\n<ol start=\"3\">\n<li><code class=\"language-text\">.git/config</code> : git 디렉토리에 있고 특정 저장소에만 적용되는 설정이다</li>\n</ol>\n<blockquote>\n<p><code class=\"language-text\">git config --local</code>옵션으로 이 파일을 읽고 쓸 수 있다(—local: default value)</p>\n</blockquote>\n<p>위의 설정은 3 > 2 > 1순으로 우선순위를 갖는다</p>\n<p>이제 우선순위를 알았으니 글로벌설정을 진행해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git config --global user.name &quot;ayaan&quot;\n$ git config --global user.email &quot;email@gmail.com&quot;</code></pre></div>\n<p>편집기는 시스템의 기본편집기를 사용하는데 내 경우는 vscode로 설정하였다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">git config --global core.editor &quot;code --wait&quot;</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">--wait</code> flag는 편집이 완료되고 해당 파일의 실행을 종료했을 때까지 다음 입력을 대기한다는 설정이다</p>\n</blockquote>\n<p>이제 설정이 다 끝났다면 설정이 잘 됐는지 확인해보도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git config --list --show-origin</code></pre></div>\n<p><code class=\"language-text\">$ git config --list</code>만으로도 설정을 확인할 수 있지만 어떤 파일에 의해 설정이 되었는지 확인할 수 있는 <code class=\"language-text\"></code>show-origin` flag를 사용하면 설정을 수정할 때 좀 더 용이하다</p>","frontmatter":{"title":"git의 모든 것 -1","date":"May 06, 2022"}}},"pageContext":{"slug":"/git/git의-모든-것--1/","previous":{"fields":{"slug":"/books/1의-비극/"},"frontmatter":{"title":"1의 비극"}},"next":{"fields":{"slug":"/git/git의-모든-것--2/"},"frontmatter":{"title":"git의 모든 것 -2"}}}}}