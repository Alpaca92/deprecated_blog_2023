{"componentChunkName":"component---src-templates-blog-post-js","path":"/git/git의-모든-것---02/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"6edd0eb0-1e15-5e1d-9a78-4d2397a3f9b7","excerpt":"git 저장소 만들기 기존 디렉토리를 git 저장소로 만들기 이 명령은 이라는 하위 디렉토리를 만든다 디렉토리에는 저장소에 필요한 뼈대 파일(skeleton)이 들어 있어 해당 디렉토리를 git 저장소로 만들 수 있게 된다 기존 저장소를 clone 하기 다른 프로젝트를 참여하거나 git 저장소를 복사하고 싶다면 을 사용하면 된다 위 명령어는 안에 프로젝트를 clone…","html":"<h1 id=\"git-저장소-만들기\" style=\"position:relative;\"><a href=\"#git-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"git 저장소 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>git 저장소 만들기</h1>\n<h2 id=\"기존-디렉토리를-git-저장소로-만들기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EB%94%94%EB%A0%89%ED%86%A0%EB%A6%AC%EB%A5%BC-git-%EC%A0%80%EC%9E%A5%EC%86%8C%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"기존 디렉토리를 git 저장소로 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 디렉토리를 git 저장소로 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ cd my_project\n$ git init</code></pre></div>\n<p>이 명령은 <code class=\"language-text\">.git</code>이라는 하위 디렉토리를 만든다</p>\n<p><code class=\"language-text\">.git</code>디렉토리에는 저장소에 필요한 뼈대 파일(skeleton)이 들어 있어 해당 디렉토리를 git 저장소로 만들 수 있게 된다</p>\n<h2 id=\"기존-저장소를-clone-하기\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EC%A1%B4-%EC%A0%80%EC%9E%A5%EC%86%8C%EB%A5%BC-clone-%ED%95%98%EA%B8%B0\" aria-label=\"기존 저장소를 clone 하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기존 저장소를 clone 하기</h2>\n<p>다른 프로젝트를 참여하거나 git 저장소를 복사하고 싶다면 <code class=\"language-text\">git clone</code>을 사용하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git clone https://github.com/example.git</code></pre></div>\n<p>위 명령어는 <code class=\"language-text\">📁example</code>안에 프로젝트를 clone하는데 디렉토리 이름을 변경하고 싶다면 뒤에 원하는 디렉토리명을 써주면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git clone https://github.com/example.git ${원하는 디렉토리명}</code></pre></div>\n<h1 id=\"수정하고-저장소에-저장하기\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A0%95%ED%95%98%EA%B3%A0-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\" aria-label=\"수정하고 저장소에 저장하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수정하고 저장소에 저장하기</h1>\n<p>워킹 디렉토리의 모든 파일은 크게 tracked, untracked로 나뉜다</p>\n<p>track는 또 다시 unmodified, modified, staged로 나뉜다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">file ┬ untracked\n     └ tracked ┬ unmodified: 수정하지 않음\n               ├ modified: 수정 함\n               └ staged: add 명령어로 staging area로 감</code></pre></div>\n<p>파일의 상태를 확인할 때에는 일반적으로 다음과 같이 확인한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nnothing to commit, working directory clean</code></pre></div>\n<p>위의 내용은 파일을 하나도 수정하지 않았다는 것을 말해준다<br />\n(정확히는 tracked 파일은 하나도 수정되지 않았다는 의미다)</p>\n<p>프로젝트에 README 파일을 만들면 다음과 같이 메세지가 바뀐다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git status\nYour branch is up-to-date with &#39;origin/master&#39;. Untracked files:\n  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n\n     README\n\nnothing added to commit but untracked files present (use &quot;git add&quot; to track)</code></pre></div>\n<p>git은 untracked 파일을 아직 스냅샷(커밋)에 넣어지지 않은 상태라고 본다</p>\n<h2 id=\"파일을-새로-추적하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%83%88%EB%A1%9C-%EC%B6%94%EC%A0%81%ED%95%98%EA%B8%B0\" aria-label=\"파일을 새로 추적하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일을 새로 추적하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git add README\n$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     new file:   README</code></pre></div>\n<p>이제 README 파일은 tracked 상태면서 커밋에 추가될 staged 상태라는 것을 알 수 있다</p>\n<h2 id=\"modified상태의-파일을-stage하기\" style=\"position:relative;\"><a href=\"#modified%EC%83%81%ED%83%9C%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%84-stage%ED%95%98%EA%B8%B0\" aria-label=\"modified상태의 파일을 stage하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>modified상태의 파일을 stage하기</h2>\n<p>이미 tracked 상태인 파일을 수정하면 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     new file:   README\n\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md</code></pre></div>\n<p>이 경우 다시 <code class=\"language-text\">$ git add</code>를 통해 CONTRIBUTING.md 파일을 staged 상태로 만들어줘야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git add CONTRIBUTING.md\n$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     new file:   README\n     modified:   CONTRIBUTING.md</code></pre></div>\n<p>여기서 다시 한번 CONTRIBUTING.md 파일을 수정하게 되면 다음과 같은 상태가 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">On branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     new file:   README\n     modified:   CONTRIBUTING.md\n\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md</code></pre></div>\n<p>즉, 수정하기 전의 CONTRIBUTING.md 파일은 staged 상태이지만 수정된 CONTRIBUTING.md 파일은 unstaged 상태이다</p>\n<p>따라서 다시 한번 <code class=\"language-text\">$ git add</code>명령어를 통해 staged 상태로 만들어줘야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git add CONTRIBUTING.md\n$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     new file:   README\n     modified:   CONTRIBUTING.md</code></pre></div>\n<h2 id=\"파일-무시하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EB%AC%B4%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-label=\"파일 무시하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 무시하기</h2>\n<p>git으로 관리하지 않아도 되는 파일이나 공개되서는 안되는 파일들이 있다</p>\n<p>이를 손쉽게 무시할 수 있는 방법이 <code class=\"language-text\">.gitignore</code>이다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ touch .gitignore # root path</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># 📁.gitignore\n\n*.[oa] #.o, .a 파일을 git이 무시\n*~ # ~로 끝나는 파일을 git이 무시</code></pre></div>\n<p>asterisk 2개(**)로 디렉토리 안의 디렉토리 또한 표현할 수 있다</p>\n<p>예를 들어 <code class=\"language-text\">a/**/z</code>는 a/z, a/b/z, a/b/c/z 등의 패턴을 모두 git이 무시한다</p>\n<p>이러한 패턴을 작성하는 것은 사용자의 몫이며 아래는 간단한 <code class=\"language-text\">.gitignore</code>의 예시디</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># 📁.gitignore\n\n# 확장자가 .a인 파일 무시\n*.a\n\n# 윗  라인에서 확장자가 .a인 파일은 무시하게 했지만 lib.a는 무시하지 않음\n!lib.a\n\n# 현재 디렉토리에 있는 TODO파일은 무시하고 subdir/TODO처럼 하위디렉토리에 있는 파일은 무시하지 않음\n/TODO\n\n# build/ 디렉토리에 있는 모든 파일은 무시\nbuild/\n\n# doc/notes.txt 파일은 무시하고 doc/server/arch.txt 파일은 무시하지 않음\ndoc/*.txt\n\n# doc 디렉토리 아래의 모든 .pdf 파일을 무시\ndoc/**/*.pdf</code></pre></div>\n<h2 id=\"staged와-unstaged-상태의-변경-내용을-보기\" style=\"position:relative;\"><a href=\"#staged%EC%99%80-unstaged-%EC%83%81%ED%83%9C%EC%9D%98-%EB%B3%80%EA%B2%BD-%EB%82%B4%EC%9A%A9%EC%9D%84-%EB%B3%B4%EA%B8%B0\" aria-label=\"staged와 unstaged 상태의 변경 내용을 보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>staged와 unstaged 상태의 변경 내용을 보기</h2>\n<p>단순히 파일이 변경된 것이 아니라 좀 더 디테일하게 변경내용을 살펴보려면 <code class=\"language-text\">$ git diff</code>를 사용해야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     modified:   README\n\nChanges not staged for commit:\n  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git diff\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 8ebb991..643e24f 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -65,7 +65,8 @@ branch directly, things can get messy.\n Please include a nice description of your changes when you submit your PR;\n if we have to read the whole diff to figure out why you&#39;re contributing  in the first place, you&#39;re less likely to get feedback and have your change\n-merged in.\n+merged in. Also, split your changes into comprehensive chunks if your patch is\n+longer than a dozen lines.\n If you are starting to work on a particular area, feel free to submit a PR\n that highlights your work in progress (and note in the PR title that it&#39;s</code></pre></div>\n<p>이렇게 <code class=\"language-text\">$ git diff</code>를 통해 tracked &#x26;&#x26; unstaged 파일의 변경점을 확인할 수 있다<br />\n(이 명령은 워킹 디렉토리와 staging area에 있는 것을 비교한다)</p>\n<p>만약 커밋을 위해 staging area에 넣은 파일의 변경 부분을 보고 싶으면 <code class=\"language-text\">$ git diff --staged</code>를 사용하면 된다<br />\n(이 명령은 commit한 것과 staging area에 있는 것을 비교한다)</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git diff --staged\ndiff --git a/README b/README\nnew file mode 100644\nindex 0000000..03902a1\n--- /dev/null\n+++ b/README\n@@ -0,0 +1 @@\n+My Project</code></pre></div>\n<p>기본 도구는 vim으로 되어있으나 터미널로 출력되는게 불편하다면 아래 명령어를 통해 사용 가능한 도구를 확인하고 변경하도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git difftool --tool-help</code></pre></div>\n<h2 id=\"변경사항-커밋하기\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%BB%A4%EB%B0%8B%ED%95%98%EA%B8%B0\" aria-label=\"변경사항 커밋하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경사항 커밋하기</h2>\n<p><code class=\"language-text\">$ git add .</code>로 모든 파일들을 staged 상태로 만들었다면 커밋을 할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git commit</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># Please enter the commit message for your changes. Lines starting\n# with &#39;#&#39; will be ignored, and an empty message aborts the commit.\n# On branch master\n# Your branch is up-to-date with &#39;origin/master&#39;.\n#\n# Changes to be committed:\n#   new file:   README\n#   modified:   CONTRIBUTING.md\n# ~ ~ ~\n&quot;.git/COMMIT_EDITMSG&quot; 9L, 283C</code></pre></div>\n<p>이 또한 vim인데 편집기를 변경하고 싶다면 <a href=\"https://alpaca92.github.io/git/git%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83--1/#git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95\">git의 모든것 -1</a>을 확인해보도록 하자</p>\n<p>커밋은 제목과 본문으로 이뤄져 있는데 인라인으로 간단하게 메세지를 남기고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;\n[master 463dc4f] Story 182: Fix benchmarks for speed\n 2 files changed, 2 insertions(+)\n create mode 100644 README</code></pre></div>\n<p>위와 같이 <code class=\"language-text\">-m</code> flag를 사용하면 된다</p>\n<h2 id=\"staging-area-생략하기\" style=\"position:relative;\"><a href=\"#staging-area-%EC%83%9D%EB%9E%B5%ED%95%98%EA%B8%B0\" aria-label=\"staging area 생략하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>staging area 생략하기</h2>\n<p>보통은 수정된 파일을 모두 staging area로 올리고 commit을 하므로 이 과정을 단축하고 싶을 때가 있을 것이다</p>\n<p>이때는 <code class=\"language-text\">$ git add .</code>대신 <code class=\"language-text\">-a</code> flag를 사용하자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git commit -a -m &#39;added new benchmarks&#39;\n[master 83e38c7] added new benchmarks\n 1 file changed, 5 insertions(+), 0 deletions(-)</code></pre></div>\n<h2 id=\"파일-삭제하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-label=\"파일 삭제하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 삭제하기</h2>\n<p>파일을 그냥 지우는 것과 git 명령어를 통해 지우는 것에 대한 차이점을 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># 그냥 파일을 지울 때\n$ rm PROJECTS.md\n$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nhanges not staged for commit:\n  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)\n  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n\n        deleted:    PROJECTS.md\n\nno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"># git 명령어를 통해 지웠을 때\n$ git rm PROJECTS.md\nrm &#39;PROJECTS.md&#39;\n\n$ git status On branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n     deleted:    PROJECTS.md</code></pre></div>\n<p>두 개의 차이를 알겠는가?</p>\n<p>일반적인 방법으로의 삭제한 경우에는 unstaged 상태인 것을 알 수 있다</p>\n<p>하지만 git 명령어로 삭제를 하면 staged 상태가 되고 이를 커밋하면 비로소 파일은 삭제된다</p>\n<p>여러 파일을 한번에 삭제하고 싶을 때에는 file-glob형태를 사용할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git rm log/\\*.log</code></pre></div>\n<p>이 명령은 log 디렉토리안에 있는 모든 .log파일을 삭제한다</p>\n<p>파일을 실제로 삭제하는 것이 아니라 staging area에서만 삭제하고 싶다면 어떻게 해야할까?</p>\n<p>이때는 —cached 옵션을 사용하도록 하자</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git rm --cached README</code></pre></div>\n<h2 id=\"파일-이름-변경하기\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%9D%B4%EB%A6%84-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"파일 이름 변경하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 이름 변경하기</h2>\n<p>파일 이름을 변경할 때에는 <code class=\"language-text\">$ git mv</code>명령을 사용하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git mv ${기존의 파일이름} ${변경할 파일이름}</code></pre></div>\n<p>사실 위 명렁은 아래의 과정을 단축한 명령일 뿐이다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ mv README.md README\n$ git rm README.md\n$ git add README</code></pre></div>\n<p>이 명령을 실행하고 나면 git은 이름이 바뀐 사실을 알고 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ git mv README.md README\n$ git status\nOn branch master\nYour branch is up-to-date with &#39;origin/master&#39;.\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n     renamed:    README.md -&gt; README</code></pre></div>","frontmatter":{"title":"git의 모든 것 - 2","date":"May 09, 2022"}}},"pageContext":{"slug":"/git/git의-모든-것---02/","previous":{"fields":{"slug":"/git/git의-모든-것---01/"},"frontmatter":{"title":"git의 모든 것 - 1"}},"next":{"fields":{"slug":"/git/git의-모든-것---03/"},"frontmatter":{"title":"git의 모든 것 - 3"}}}}}