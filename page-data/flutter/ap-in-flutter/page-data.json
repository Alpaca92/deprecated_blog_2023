{"componentChunkName":"component---src-templates-blog-post-js","path":"/flutter/ap-in-flutter/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"d3edaa44-3205-50fd-929a-3491e38b0edc","excerpt":"비동기 프로그래밍을 이해하기 위해 먼저 라는 개념에 대해 알아보도록 하자 CPU Thread 쓰레드란 작업을 수행하는 가장 작은 단위를 말하는데 위의 그림에서 작업 1을 시작하여 완료할 때까지는 다른 작업에 CPU 사용이 불가하고\n다시 작업 2를 시작하여 완료할 때까지는 CPU 사용이 불가하다 일반적인 코드의 경우 이러한 작업 처리방식이 문제가 되지 않지만 API…","html":"<p>비동기 프로그래밍을 이해하기 위해 먼저 <code class=\"language-text\">CPU Thread</code>라는 개념에 대해 알아보도록 하자</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/flutter/images/cpu_thread.png\" alt=\"CPU Thread\"></p>\n<p>쓰레드란 <strong>작업을 수행하는 가장 작은 단위</strong>를 말하는데 위의 그림에서 작업 1을 시작하여 완료할 때까지는 다른 작업에 CPU 사용이 불가하고<br />\n다시 작업 2를 시작하여 완료할 때까지는 CPU 사용이 불가하다</p>\n<p>일반적인 코드의 경우 이러한 작업 처리방식이 문제가 되지 않지만 API를 사용에 서버에 무언가를 요청하는 등의 경우에는 이 요청에 대한 응답을 받기 전까지 아무것도 하지 못하고 기다려야 하는 상황이 발생한다</p>\n<p>이는 불필요하게 시간을 낭비할 뿐이기에 이를 해결하기 위해 비동기 프로그래밍이 탄생했다</p>\n<h1 id=\"future\" style=\"position:relative;\"><a href=\"#future\" aria-label=\"future permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Future</h1>\n<p>계산된 값을 저장하는 것으로 <strong>미래에 받아올 값</strong>을 의미한다</p>\n<h2 id=\"value\" style=\"position:relative;\"><a href=\"#value\" aria-label=\"value permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>value</h2>\n<p>미래에 받아올 값을 지정할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Future</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ayaan'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"delayed\" style=\"position:relative;\"><a href=\"#delayed\" aria-label=\"delayed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>delayed</h2>\n<p><strong>얼마 후에</strong> 미래에 값을 받아올 것인지를 정할 수 있는 메서드다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>int number1<span class=\"token punctuation\">,</span> int number2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산 시작: $number1 + $number2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Future</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산 완료: $number1 + $number2 = ${number1 + number2}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 종료'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  계산 시작: 1 + 1\n  함수 종료\n  계산 완료: 1 + 1 = 2\n*/</span></code></pre></div>\n<p>우리가 지금까지 배웠던 것을 바탕으로 추론해보면 <strong>계산 시작, 계산 완료, 함수 종료</strong>의 순으로 출력될 것이라고 예상했을 것이다</p>\n<p>하지만 <code class=\"language-text\">delayed</code> 메서드를 통해 2초 뒤에 실행을 하게 했으므로 <strong>계산 시작, 함수 종료, 계산 완료</strong>순으로 출력된다</p>\n<h2 id=\"asyncawait\" style=\"position:relative;\"><a href=\"#asyncawait\" aria-label=\"asyncawait permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>async/await</h2>\n<p>서버와 통신하여 데이터를 받는다면 해당 데이터를 가공하는 로직을 작성할 때도 있다</p>\n<p>이러한 경우를 위해 데이터를 비동기적으로 처리하는 <code class=\"language-text\">async/await</code>를 사용하는 것이다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>int number1<span class=\"token punctuation\">,</span> int number2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산 시작: $number1 + $number2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token class-name\">Future</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산 완료: $number1 + $number2 = ${number1 + number2}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 종료'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  계산 시작: 1 + 1\n  (2초간 기다린 후) 계산 완료: 1 + 1 = 2\n  함수 종료\n*/</span></code></pre></div>\n<p>위 코드를 보면 ‘2초 동안 그러면 아무런 일도 하지 못하는 것 아닐까?‘라는 의구심이 생기게 되는데 아래의 코드를 보면</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>int number1<span class=\"token punctuation\">,</span> int number2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산 시작: $number1 + $number2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> <span class=\"token class-name\">Future</span><span class=\"token punctuation\">.</span><span class=\"token function\">delayed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'계산 완료: $number1 + $number2 = ${number1 + number2}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수 종료'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n  계산 시작: 1 + 1\n  계산 시작: 2 + 2\n  계산 완료: 1 + 1 = 2\n  함수 종료\n  계산 완료: 2 + 2 = 4\n  함수 종료\n*/</span></code></pre></div>\n<p>위와 같이 출력하는 것을 볼 수 있는데 이는 <code class=\"language-text\">await</code>뒤의 작업들은 따로 작업을 수행하면서 그 다음의 함수들을 바로 실행하기 때문이다</p>\n<p>이를 좀 더 구체적으로 살펴보면 ‘addNumbers(1, 1) 실행 → print(‘계산 시작’) 실행 → await문 따로 작업(1) → addNumbers(2, 2) 실행(1) → await문 따로 작업(2) → 작업 된 (1) 실행 → print(‘함수 종료’) 실행 → 작업 된 (2) 실행 → print(‘함수 종료’) 실행’의 순서대로 실행되는 것을 알 수 있다</p>\n<p>즉, 짜장면 배달을 시킬 때 우리는 ‘짜장면 배달옴 → 짜장면 먹음 → 짜장면 그릇 기사님이 회수함’의 과정을 거치지만 기사님께서 짜장면을 다 먹을때까지기다리고 있지 않고 다른 일을 하다가 짜장면을 다 먹으면 그릇을 회수하러 오는 것과 같다고 보면 된다</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*references</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=rk41rBXq3zQ&#x26;ab_channel=%EC%BD%94%EB%93%9C%ED%8C%A9%ED%86%A0%EB%A6%AC\">[무료 프로그래밍 강의] 40분만에 끝내는 비동기 프로그래밍</a></li>\n<li><a href=\"https://dart.dev/codelabs/async-await#what-is-a-future\">What is a future</a></li>\n</ol>","frontmatter":{"title":"플러터의 비동기 프로그래밍(AP)","date":"May 30, 2022"}}},"pageContext":{"slug":"/flutter/ap-in-flutter/","previous":{"fields":{"slug":"/flutter/fp-in-flutter/"},"frontmatter":{"title":"플러터의 함수형 프로그래밍(FP)"}},"next":{"fields":{"slug":"/dev/install-zsh-on-windows-10/"},"frontmatter":{"title":"윈도우에서 zsh 설치하기"}}}}}