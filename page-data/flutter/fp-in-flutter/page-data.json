{"componentChunkName":"component---src-templates-blog-post-js","path":"/flutter/fp-in-flutter/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"46882cbe-b9ae-5249-bc98-652328fe2e85","excerpt":"개인적으로 함수형 프로그래밍(functional programming)은 OOP에 비하면 쉽다고 생각한다 그래도 flutter에서는 어떤식으로 사용되어지고 있는지 알 필요가 있으니 정리를 해두도록 하자 형변환 이렇게 list에서 map, set으로 map과 set을 list로 자유롭게 형변환이 가능하다 📌  vs 의 차이점 >  >  메서드를 사용하면 해당 타입을 읽어오지만  생성자의 경우는 타입을 명시해줘야한다\nex. Set.from(someList); map iterable…","html":"<p>개인적으로 함수형 프로그래밍(functional programming)은 OOP에 비하면 쉽다고 생각한다</p>\n<p>그래도 flutter에서는 어떤식으로 사용되어지고 있는지 알 필요가 있으니 정리를 해두도록 하자</p>\n<h1 id=\"형변환\" style=\"position:relative;\"><a href=\"#%ED%98%95%EB%B3%80%ED%99%98\" aria-label=\"형변환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형변환</h1>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> blackPink <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'로제'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'지수'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'리사'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'제니'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'제니'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPink<span class=\"token punctuation\">.</span><span class=\"token function\">asMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// {0: 로제, 1: 지수, 2: 리사, 3: 제니, 4: 제니}</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPink<span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// {로제, 지수, 리사, 제니}</span>\n\n  <span class=\"token class-name\">Map</span> blackPinkMap <span class=\"token operator\">=</span> blackPink<span class=\"token punctuation\">.</span><span class=\"token function\">asMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPinkMap<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// (0, 1, 2, 3, 4)</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPinkMap<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// (로제, 지수, 리사, 제니, 제니)</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPinkMap<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [0, 1, 2, 3, 4]</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPinkMap<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [로제, 지수, 리사, 제니, 제니]</span>\n\n  <span class=\"token class-name\">Set</span> blackPinkSet <span class=\"token operator\">=</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>blackPink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPinkSet<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [로제, 지수, 리사, 제니]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 list에서 map, set으로 map과 set을 list로 자유롭게 형변환이 가능하다</p>\n<blockquote>\n<p>📌 <code class=\"language-text\">Set.from()</code> vs <code class=\"language-text\">toSet()</code>의 차이점<br /> > <br /> > <code class=\"language-text\">toSet()</code> 메서드를 사용하면 해당 타입을 읽어오지만 <code class=\"language-text\">Set.from()</code> 생성자의 경우는 타입을 명시해줘야한다<br />\nex. Set<String>.from(someList);</p>\n</blockquote>\n<h2 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map</h2>\n<p>iterable한 자료를 다른 형태로 변경할 때 사용되는 메서드다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// List</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> blackPink <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'로제'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'지수'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'리사'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'제니'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> newBlackPink <span class=\"token operator\">=</span> blackPink<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'블랙핑크 $x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>newBlackPink<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [블랙핑크 로제, 블랙핑크 지수, 블랙핑크 리사, 블랙핑크 제니]</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPink <span class=\"token operator\">==</span> blackPink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>newBlackPink <span class=\"token operator\">==</span> newBlackPink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPink <span class=\"token operator\">==</span> newBlackPink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// Map</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> harryPotter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'Harry Potter'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'해리 포터'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Ron Weasley'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'론 위즐리'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Hermione Granger'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'헤르미온느 그레인저'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> result <span class=\"token operator\">=</span> harryPotter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span>\n      <span class=\"token class-name\">MapEntry</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Harry Potter Character $key'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'해리포터 캐릭터 $value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*\n    {\n      Harry Potter Character Harry Potter: 해리포터 캐릭터 해리 포터,\n      Harry Potter Character Ron Weasley: 해리포터 캐릭터 론 위즐리,\n      Harry Potter Character Hermione Granger: 해리포터 캐릭터 헤르미온느 그레인저\n    }\n  */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// Set</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Set</span> blackPink <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'로제'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'지수'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'제니'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'리사'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> newBlackPink <span class=\"token operator\">=</span> blackPink<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'블랙핑크 $x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>newBlackPink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// {블랙핑크 로제, 블랙핑크 지수, 블랙핑크 제니, 블랙핑크 리사}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"split\" style=\"position:relative;\"><a href=\"#split\" aria-label=\"split permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>split</h2>\n<p>문자열을 매치되는 패턴에 의해 분리해 리스트에 담아주는 메서드다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// List</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> number <span class=\"token operator\">=</span> <span class=\"token string\">'13579'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> parsed <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 3, 5, 7, 9]</span>\n\n  <span class=\"token keyword\">final</span> dotJpg <span class=\"token operator\">=</span> number<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string\">'$x.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>dotJpg<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1.jpg, 3.jpg, 5.jpg, 7.jpg, 9.jpg]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"where\" style=\"position:relative;\"><a href=\"#where\" aria-label=\"where permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>where</h2>\n<p>특정 조건을 만족하는 요소들만을 분리하고 싶을 때 사용하는 메서드다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'로제'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'블랙핑크'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'지수'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'블랙핑크'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'RM'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'BTS'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'뷔'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'BTS'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> blackPink <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'group'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'블랙핑크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>blackPink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [{name: 로제, group: 블랙핑크}, {name: 지수, group: 블랙핑크}]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>💭 js를 아는 사람이라면 <code class=\"language-text\">filter()</code>와 유사하다는 것을 알 수 있다</p>\n</blockquote>\n<h2 id=\"reduce\" style=\"position:relative;\"><a href=\"#reduce\" aria-label=\"reduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reduce</h2>\n<p>요소를 반복적으로 결합하여 단일 값으로 축소합니다<br />\n(대상 iterable은 1개 이상의 요소를 갖고 있어야 한다)</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> prev <span class=\"token operator\">+</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 29</span>\n\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'안녕하세요 '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'저는 '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'ayaan 입니다'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> greeting <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> prev <span class=\"token operator\">+</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 안녕하세요 저는 ayaan 입니다</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>단, reduce를 사용할 때 실행 대상이 되는 데이터의 타입과 반환되는 데이터의 타입이 동일해야만 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">'안녕하세요 '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'저는 '</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'ayaan 입니다'</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> length <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> prev<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> next<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// error: The return type 'int' is not a 'String' as required by the closure's context</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"fold\" style=\"position:relative;\"><a href=\"#fold\" aria-label=\"fold permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fold</h2>\n<p>reduce와 비슷하지만 initial value를 지정하고 제너릭으로 타입을 지정할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span> <span class=\"token operator\">=</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span>fold<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> prev <span class=\"token operator\">+</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"spread-operator\" style=\"position:relative;\"><a href=\"#spread-operator\" aria-label=\"spread operator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>spread operator</h2>\n<p>iterable한 데이터 값을 개별로 분리 할 수 있다 <em><a href=\"https://dart.dev/guides/language/language-tour#spread-operator\">ref</a></em></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span> even <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span> odd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>even<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>odd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// [2, 4, 6, 8, 1, 3, 5, 7]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>위에서 배웠던 것들을 종합하여 사용해 본다면 이래와 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'지수'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'블랙핑크'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'로제'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'블랙핑크'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'RM'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'BTS'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'뷔'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'group'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'BTS'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">final</span> parsedPeople <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>\n      name<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n      group<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token string\">'group'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>parsedPeople<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*\n    [\n      Person(name: 지수, group: 블랙핑크),\n      Person(name: 로제, group: 블랙핑크),\n      Person(name: RM, group: BTS),\n      Person(name: 뷔, group: BTS)\n    ]\n  */</span>\n\n  <span class=\"token keyword\">final</span> bts <span class=\"token operator\">=</span> parsedPeople<span class=\"token punctuation\">.</span><span class=\"token function\">where</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x<span class=\"token punctuation\">.</span>group <span class=\"token operator\">==</span> <span class=\"token string\">'BTS'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>bts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">/*\n    [\n      Person(name: RM, group: BTS),\n      Person(name: 뷔, group: BTS)\n    ]\n  */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> group<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token metadata symbol\">@override</span>\n  <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Person(name: $name, group: $group)'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>FP의 가장 큰 장점은 <code class=\"language-text\">map(...).where(...).fold&lt;int>(...)</code> 이런식으로 여러 함수들은 체이닝(chaining)하여 사용할 수 있다는 점이다</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*references</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=fwh27A_D-20&#x26;ab_channel=%EC%BD%94%EB%93%9C%ED%8C%A9%ED%86%A0%EB%A6%AC\">[무료 프로그래밍 강의] 40분만에 끝내는 함수형 프로그래밍</a></li>\n<li><a href=\"https://api.dart.dev/stable/2.17.1/dart-core/Iterable/map.html\">map<T> method</a></li>\n<li><a href=\"https://api.dart.dev/stable/2.17.1/dart-core/String/split.html\">split method</a></li>\n<li><a href=\"https://api.dart.dev/stable/2.16.0/dart-core/Set/Set.from.html\">Set<E>.from constructor</a></li>\n<li><a href=\"https://api.dart.dev/stable/2.17.1/dart-core/Set/toSet.html\">toSet method</a></li>\n<li><a href=\"https://api.dart.dev/stable/2.17.1/dart-core/Iterable/where.html\">where method</a></li>\n<li><a href=\"https://api.dart.dev/stable/2.17.1/dart-core/Iterable/reduce.html\">reduce method</a></li>\n<li><a href=\"https://api.dart.dev/stable/2.17.1/dart-core/Iterable/fold.html\">fold<T> method</a></li>\n<li><a href=\"https://dart.dev/guides/language/language-tour#operators\">operators</a></li>\n</ol>","frontmatter":{"title":"플러터의 함수형 프로그래밍(FP)","date":"May 27, 2022"}}},"pageContext":{"slug":"/flutter/fp-in-flutter/","previous":{"fields":{"slug":"/typescript/what-is-tsconfig.json/"},"frontmatter":{"title":"tsconfig.json 사용하기"}},"next":{"fields":{"slug":"/flutter/ap-in-flutter/"},"frontmatter":{"title":"플러터의 비동기 프로그래밍(AP)"}}}}}