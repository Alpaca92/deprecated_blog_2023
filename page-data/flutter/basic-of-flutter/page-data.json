{"componentChunkName":"component---src-templates-blog-post-js","path":"/flutter/basic-of-flutter/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"80c52b49-3088-58d2-8662-2bf44642d0b8","excerpt":"와이프랑 공유되는 가계부를 작성하기 위해 라는 앱을 사용하고 있었다 우리는 공통 가계부와 개인 용돈이 따로있는데 개인용돈은 공유되지 않는 가계부로 공통 가계부는 공유되는 가계부로 작성하고 싶었다 즉 가계부 앱 하나의…","html":"<p>와이프랑 공유되는 가계부를 작성하기 위해 <code class=\"language-text\">부부</code>라는 앱을 사용하고 있었다</p>\n<p>우리는 공통 가계부와 개인 용돈이 따로있는데 개인용돈은 공유되지 않는 가계부로 공통 가계부는 공유되는 가계부로 작성하고 싶었다</p>\n<p>즉 가계부 앱 하나의 2개 이상을 관리하고 싶었다</p>\n<p>그래서 사용하다보니 아쉬운 점이 몇군데 있었는데</p>\n<ol>\n<li>로딩시간이 긴 것 같았다</li>\n<li>홈화면에 사진을 지정할 수 있는데 이 사진의 화질이 썩 좋지 않다</li>\n<li>다크모드가 없다</li>\n<li>관리할 수 있는 가계부가 하나밖에 없어 개인용돈 관리를 위해서는 다른 앱을 사용해야 한다</li>\n<li>엑셀로 내보내기가 없다</li>\n</ol>\n<p>이러한 점들 때문에 다른 어플들을 찾아봤으나 만족스러운 어플은 없었던 것 같다</p>\n<p>그래서 내가 앱을 만들어보면 어떨까? 싶어 react native를 사용할까 했지만 <a href=\"https://trends.google.com/trends/explore?date=2019-02-01%202022-03-24&#x26;geo=KR&#x26;q=flutter,react%20native\">구글 트랜드</a>를 보고 flutter에 관심이 더 갔다 <a href=\"https://www.monterail.com/blog/flutter-vs-react-native-mobile-development\">참고</a></p>\n<h1 id=\"types\" style=\"position:relative;\"><a href=\"#types\" aria-label=\"types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Types</h1>\n<p><code class=\"language-text\">int</code>, <code class=\"language-text\">double</code>, <code class=\"language-text\">String</code>, <code class=\"language-text\">bool</code> 등이 있는데 var를 사용한 <a href=\"https://dart.dev/guides/language/type-system#type-inference\">타입추론(type inference)</a>를 사용해 조금 더 간편하게 변수를 선언할수도 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>runtimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 타입을 명시해줄 수 있는 장점을 버리고 var로 모든 것을 선언한다면 다른 사람의 코드를 읽을 때(협업할 때) 굉장히 어려울 수가 있다</p>\n<blockquote>\n<p>💭 프론트엔드 개발자라면 왜 react에서 PropType을 쓰는지, 큰 프로젝트에서 js보다 ts를 선호하는 이유가 무엇인지를 알고 있다면 var보다는 타입을 명시하는 것이 좋겠다는 생각을 자연스럽게 했을거다</p>\n</blockquote>\n<h2 id=\"var-vs-dynamic\" style=\"position:relative;\"><a href=\"#var-vs-dynamic\" aria-label=\"var vs dynamic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>var vs dynamic</h2>\n<p><code class=\"language-text\">var</code>와 비슷한 용도로 사용할 수 있는 타입으로 <code class=\"language-text\">dynamic</code>이 있는데 이 둘의 차이점은 타입을 변경할 수 있냐 없냐의 차이이다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">dynamic</span> name2 <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'${name.runtimeType}, ${name2.runtimeType}'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// String, String</span>\n\n  name2 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n  name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: A value of type 'int' can't be assigned to a variable of type 'String'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">dynamic</code>으로 선언하면 타입마저 변경할 수 있지만 <code class=\"language-text\">var</code>로 선언한 변수는 처음 선언했을 때의 타입을 변경할 수 없다</p>\n<h1 id=\"nullable-non-nullable\" style=\"position:relative;\"><a href=\"#nullable-non-nullable\" aria-label=\"nullable non nullable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nullable, non-nullable</h1>\n<p>flutter는 변수에 null이 될 수 있다면 <code class=\"language-text\">?</code>를 붙여 명시적으로 표시할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'black pink'</span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: A value of type 'Null' can't be assigned to a variable of type 'String'</span>\n\n<span class=\"token class-name\">String</span><span class=\"token operator\">?</span> name2 <span class=\"token operator\">=</span> <span class=\"token string\">'twice'</span><span class=\"token punctuation\">;</span>\n\nname2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">.</span>runtimeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Null</span></code></pre></div>\n<p>반대로 null이 될 수 없는 변수로 변환하려면 <code class=\"language-text\">!</code>를 붙여주면 된다 <a href=\"https://stackoverflow.com/questions/63253015/what-does-the-exclamation-mark-mean-before-a-function-call\">참고</a></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chunkCallback <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  chunkCallback<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"final-vs-const\" style=\"position:relative;\"><a href=\"#final-vs-const\" aria-label=\"final vs const permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>final vs const</h1>\n<p>변수의 값을 변경하고 싶지 않다면 <code class=\"language-text\">final</code>, <code class=\"language-text\">const</code>를 사용해주면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ayaan'</span><span class=\"token punctuation\">;</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'anonymous'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: The final variable 'name' can only be set once</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">const</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ayaan'</span><span class=\"token punctuation\">;</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token string\">'anonymous'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error: Constant variables can't be assigned a value</span></code></pre></div>\n<p><code class=\"language-text\">final</code>, <code class=\"language-text\">const</code>를 사용할 때에는 타입을 생략할 수 있으며 이는 다음과 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">const</span> <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'ayaan'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> naem <span class=\"token operator\">=</span><span class=\"token string\">'ayaan'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">final</code>과 <code class=\"language-text\">const</code>의 차이는 <code class=\"language-text\">빌드 타임에 값을 알고 있는가?</code>에 따라 나뉜다</p>\n<blockquote>\n<p>코드를 작성하고 실행할 때 코드가 2진법으로 변환이 되는데 이를 <code class=\"language-text\">빌드 타임</code>이라고 한다</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">DateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token class-name\">DateTime</span> now2 <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// error: Const variables must be initialized with a constant value</span>\n<span class=\"token comment\">// error: The constructor being called isn't a const constructor</span></code></pre></div>\n<h1 id=\"null-aware-operators\" style=\"position:relative;\"><a href=\"#null-aware-operators\" aria-label=\"null aware operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null-aware Operators</h1>\n<p><code class=\"language-text\">null</code>인지 아닌지에 따라 값을 다르게 지정할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">double<span class=\"token operator\">?</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\nnumber <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1.</span>\n\nnumber <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">1.</code>이 없다면 number의 값은 10이고 <code class=\"language-text\">1.</code>이 있다면 number의 값은 5일 것이다</p>\n<p><code class=\"language-text\">??=</code>가 의미하는 것은 <code class=\"language-text\">좌항(여기서는 number)가 null이면 우항을 할당한다</code>이기에 <code class=\"language-text\">1.</code>이 있다면 좌항이 null이므로 5가 할당된다 <a href=\"https://medium.com/@thinkdigitalsoftware/null-aware-operators-in-dart-53ffb8ae80bb\">참고</a></p>\n<h1 id=\"list\" style=\"position:relative;\"><a href=\"#list\" aria-label=\"list permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>list</h1>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> blackPink <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'제니'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'지수'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'로제'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'리사'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 리스트 내에 들어갈 타입을 미리 명시해줘야 한다</p>\n<h1 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>map</h1>\n<p>key-value pair로 이루어져있으며 list처럼 generic으로 key, value의 타입을 명시해줘야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> dictionary <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Harry Potter'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'해리포터'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Ron Weasley'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'론 위즐리'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"set\" style=\"position:relative;\"><a href=\"#set\" aria-label=\"set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>set</h1>\n<p>list와 비슷하지만 set은 중복값을 자동으로 삭제해줘 <code class=\"language-text\">id</code>등을 보관할 때 유용하다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'Flutter'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Black Pink'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Flutter'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// {'Flutter', 'Black Pink'}</span></code></pre></div>\n<h1 id=\"enum\" style=\"position:relative;\"><a href=\"#enum\" aria-label=\"enum permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>enum</h1>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">enum</span> <span class=\"token class-name\">Status</span> <span class=\"token punctuation\">{</span>\n  approved<span class=\"token punctuation\">,</span>\n  pending<span class=\"token punctuation\">,</span>\n  rejected<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Status</span> status <span class=\"token operator\">=</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>approved<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'승인입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token class-name\">Status</span><span class=\"token punctuation\">.</span>pending<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'대기입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'거절입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">enum</code>을 쓰는 이유는 정확히 <strong><code class=\"language-text\">Status</code>안의 값들만을 사용하겠다</strong>라고 명시해주는 것과 같기 때문이다</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> status <span class=\"token operator\">=</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'approved'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'승인입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> <span class=\"token string\">'pending'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'대기입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'거절입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 해도 동일한 결과를 가져오지만 <code class=\"language-text\">enum</code>을 사용함으로써 오타를 방지하고 <code class=\"language-text\">status</code>의 값에는 approved, pending, rejected 딱 세가지만 있을 수 있다는 것을 명시한다</p>\n<h1 id=\"function\" style=\"position:relative;\"><a href=\"#function\" aria-label=\"function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>function</h1>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">,</span> int z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  int acc <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acc <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'짝수입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'홀수입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 파라미터에 타입을 지정해주고 함수의 타입 또한 지정해줄 수 있다<br />\n(위치가 정해져 있는 파라미터를 <code class=\"language-text\">positional parameter</code>라고 한다)</p>\n<h2 id=\"optional-parameter\" style=\"position:relative;\"><a href=\"#optional-parameter\" aria-label=\"optional parameter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>optional parameter</h2>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>int<span class=\"token operator\">?</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> int<span class=\"token operator\">?</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  int acc <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acc <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'짝수입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'홀수입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>파라미터가 optional인 경우는 대괄호로 감싸주면 된다</p>\n<h2 id=\"named-parameter\" style=\"position:relative;\"><a href=\"#named-parameter\" aria-label=\"named parameter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>named parameter</h2>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  required int x<span class=\"token punctuation\">,</span>\n  required int y<span class=\"token punctuation\">,</span>\n  int z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// optional parameter</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  int acc <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acc <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'짝수입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'홀수입니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>파라미터에 이름을 붙이는 경우에는 순서가 중요하지 않다</p>\n<h1 id=\"arrow-function\" style=\"position:relative;\"><a href=\"#arrow-function\" aria-label=\"arrow function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>arrow function</h1>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">int <span class=\"token function\">addNumbers</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>required int y<span class=\"token punctuation\">,</span> int z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 화살표 함수를 쓸 수 있으며 implicit return 해준다</p>\n<h1 id=\"typedef\" style=\"position:relative;\"><a href=\"#typedef\" aria-label=\"typedef permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>typedef</h1>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Operation</span> operation <span class=\"token operator\">=</span> add<span class=\"token punctuation\">;</span>\n\n  int result <span class=\"token operator\">=</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 60</span>\n\n  operation <span class=\"token operator\">=</span> subtract<span class=\"token punctuation\">;</span>\n\n  int result2 <span class=\"token operator\">=</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -40</span>\n\n  int result3 <span class=\"token operator\">=</span> <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 120</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token class-name\">Operation</span> <span class=\"token operator\">=</span> int <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">,</span> int z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nint <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">,</span> int z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\nint <span class=\"token function\">subtract</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">,</span> int z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> x <span class=\"token operator\">-</span> y <span class=\"token operator\">-</span> z<span class=\"token punctuation\">;</span>\nint <span class=\"token function\">calculate</span><span class=\"token punctuation\">(</span>int x<span class=\"token punctuation\">,</span> int y<span class=\"token punctuation\">,</span> int z<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Operation</span> operation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">operation</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*references</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=3Ck42C2ZCb8&#x26;ab_channel=%EC%BD%94%EB%93%9C%ED%8C%A9%ED%86%A0%EB%A6%AC\">[무료 프로그래밍 강의] 1시간만에 끝내는 Dart언어 기본기</a></li>\n</ol>","frontmatter":{"title":"플러터 입문기","date":"May 16, 2022"}}},"pageContext":{"slug":"/flutter/basic-of-flutter/","previous":{"fields":{"slug":"/dev/정규표현식에-대한-이해/"},"frontmatter":{"title":"정규표현식에 대한 이해"}},"next":{"fields":{"slug":"/flutter/oop-in-flutter/"},"frontmatter":{"title":"플러터의 객체지향프로그래밍(OOP)"}}}}}