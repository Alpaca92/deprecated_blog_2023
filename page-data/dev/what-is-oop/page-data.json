{"componentChunkName":"component---src-templates-blog-post-js","path":"/dev/what-is-oop/","result":{"data":{"site":{"siteMetadata":{"title":"Memory !== Record","author":"Ayaan","siteUrl":"https://alpaca92.github.io","comment":{"disqusShortName":"","utterances":"Alpaca92/alpaca92.github.io"},"sponsor":{"buyMeACoffeeId":"ayaan92"}}},"markdownRemark":{"id":"c591ee12-7fc1-5d8a-a456-f28e0912612a","excerpt":"요즘 트랜드는 함수형 프로그래밍(FP)인 것 같다는 생각이 든다 하지만 ES7에서 constructor와 super의 생략, arrow function 지원 등을 보면 OOP에도 많은 신경을 써주는 것 같다 유행은 돌고 도는법이고 OOP를 해야하는 언어를 사용하게 될 날도 올 수 있기 때문에 알고있는 것은 대단히 도움이 될 것이다 OOP의 주요개념 4가지 OOP에는 , , , 이라는 주요한 4가지 개념이 존재한다 한국어로 변역하면 , , , 이란 뜻인데 한국말로 해도 어렵다 그래서 이…","html":"<p>요즘 트랜드는 함수형 프로그래밍(FP)인 것 같다는 생각이 든다</p>\n<p>하지만 ES7에서 constructor와 super의 생략, arrow function 지원 등을 보면 OOP에도 많은 신경을 써주는 것 같다</p>\n<p>유행은 돌고 도는법이고 OOP를 해야하는 언어를 사용하게 될 날도 올 수 있기 때문에 알고있는 것은 대단히 도움이 될 것이다</p>\n<h1 id=\"oop의-주요개념-4가지\" style=\"position:relative;\"><a href=\"#oop%EC%9D%98-%EC%A3%BC%EC%9A%94%EA%B0%9C%EB%85%90-4%EA%B0%80%EC%A7%80\" aria-label=\"oop의 주요개념 4가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OOP의 주요개념 4가지</h1>\n<p>OOP에는 <code class=\"language-text\">Encapsulation</code>, <code class=\"language-text\">Abstraction</code>, <code class=\"language-text\">Polymorphism</code>, <code class=\"language-text\">Inheritance</code>이라는 주요한 4가지 개념이 존재한다</p>\n<p>한국어로 변역하면 <code class=\"language-text\">캡슐화</code>, <code class=\"language-text\">추상화</code>, <code class=\"language-text\">다형성</code>, <code class=\"language-text\">상속</code>이란 뜻인데 한국말로 해도 어렵다</p>\n<p>그래서 이 4가지 개념을 좀 더 자세히 살펴보도록 하자</p>\n<h2 id=\"encapsulation캡술화\" style=\"position:relative;\"><a href=\"#encapsulation%EC%BA%A1%EC%88%A0%ED%99%94\" aria-label=\"encapsulation캡술화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Encapsulation(캡술화)</h2>\n<p>캡슐화는 데이터와 데이터를 활용하는 함수를 캡슐(혹은 컨테이너)에 넣는 것을 말하며 OOP의 경우에 캡슐은 <code class=\"language-text\">class</code>를 의미한다</p>\n<p>예를 들어 객체와 해당 객체를 활용하는 함수가 있다고 해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> entrepreneur <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Elon'</span><span class=\"token punctuation\">,</span>\n  lastname<span class=\"token operator\">:</span> <span class=\"token string\">'Musk'</span><span class=\"token punctuation\">,</span>\n  shares<span class=\"token operator\">:</span> <span class=\"token number\">17700000</span><span class=\"token punctuation\">,</span>\n  company<span class=\"token operator\">:</span> <span class=\"token string\">'TSLA'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">calcluateNetWorth</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shares<span class=\"token punctuation\">,</span> company</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> sharePrice <span class=\"token operator\">=</span> <span class=\"token function\">getSharePrice</span><span class=\"token punctuation\">(</span>company<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> shares <span class=\"token operator\">*</span> sharePrice\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">calcluateNetWorth</span><span class=\"token punctuation\">(</span>elon<span class=\"token punctuation\">.</span>shares<span class=\"token punctuation\">,</span> elon<span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">)</span></code></pre></div>\n<p>이를 캡슐화한다면 아래와 같이 <code class=\"language-text\">class</code>로 표현할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Entrepreneur</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> lastname<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> shares<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> company<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">calculateNetWorth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shares <span class=\"token operator\">*</span> <span class=\"token function\">getSharePrice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>company<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> elon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entrepreneur</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Elon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Must'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17700000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TSLA'</span><span class=\"token punctuation\">)</span>\n\nelon<span class=\"token punctuation\">.</span><span class=\"token function\">calculateNetWorth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 하면 this를 사용하기 때문에 함수에 args를 받을 필요가 없어지기 때문에 좀 더 직관적인 코드를 짤 수 있으며 재사용성이 뛰어나다</p>\n<blockquote>\n<p>📌 속성(<code class=\"language-text\">private</code>, <code class=\"language-text\">public</code> 등)을 활용하면 해당 클래스 외부에서는 해당 필드에 엑세스를 하거나 수정을 할 수 없게 되는 등 접근 권한을 부여할 수 있다</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// not working</span>\nelon<span class=\"token punctuation\">.</span>shares <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nelon<span class=\"token punctuation\">.</span>company <span class=\"token operator\">=</span> <span class=\"token string\">'AMZN'</span></code></pre></div>\n<p>예를 들어 <code class=\"language-text\">private</code> 속성을 가진 이름을 얻고 싶다면</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Entrepreneur</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> elon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entrepreneur</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Elon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Must'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17700000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TSLA'</span><span class=\"token punctuation\">)</span>\nelon<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">public</code> 메서드를 만들어서 얻을 수 있다</p>\n<p>즉 <strong>읽을 수는 없지만 쓸 수 있는 값</strong>이 된 것이다</p>\n<h2 id=\"inheritance상속\" style=\"position:relative;\"><a href=\"#inheritance%EC%83%81%EC%86%8D\" aria-label=\"inheritance상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inheritance(상속)</h2>\n<p>상속은 말그대로 물려받는 것이다</p>\n<p>일반적으로 상속이라는 의미는 부모님이 돌아가셨을 때 그 재산 등을 물려받는 것을 말한다</p>\n<p><img src=\"https://raw.githubusercontent.com/Alpaca92/alpaca92.github.io/master/content/blog/dev/images/what_is_oop_01.jpg\" alt=\"Inheritance\"></p>\n<p>위 그림을 보면 패티만 있는 버거에서 다른 두 가지의 버거로 파생되었다</p>\n<p>이렇게 파생될 수 있었던 것은 부모의 것은 그대로 받고 거기에 다른 무언가(치즈, 베이컨 등)이 추가되었기 때문이다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Entrepreneur</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> shares<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> company<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Actor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">private</span> firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> oscars<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 두개의 클래스를 보면 이름 부분이 겹치는데 이를 부모로 만들어주면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// parent</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">private</span> lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// children</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Entrepreneur</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> shares<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> company<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Actor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> oscars<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>firstName<span class=\"token punctuation\">,</span> lastName<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 상속을 받으면 동일하게 <code class=\"language-text\">Person</code>이 갖고 있던 것들을 모두 <code class=\"language-text\">Entrepreneur</code>, <code class=\"language-text\">Actor</code>가 갖게 되며 각각 원하는 것들을 추가할 수 있다</p>\n<p>즉, 메서드 또한 상속을 받는다는 말이기에 아래와 같이 메서드를 사용할 수 있다</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> elon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entrepreneur</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Elon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Must'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17700000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TSLA'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> johnny <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Actor</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jonny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Depp'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">58</span><span class=\"token punctuation\">)</span>\n\nelon<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\njohnny<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>예를 통해 알아봤듯 상속을 통해 우리는 클래스들을 더 작게 쪼개어 세분화 할 수 있다</p>\n<p>이는 재사용성이 늘어난다는 말과 동일하다 <strong>(<em>divide and conquer</em>)</strong></p>\n<h2 id=\"abstraction추상화\" style=\"position:relative;\"><a href=\"#abstraction%EC%B6%94%EC%83%81%ED%99%94\" aria-label=\"abstraction추상화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Abstraction(추상화)</h2>\n<p><code class=\"language-text\">act of specifying a general interface hiding implementation details</code></p>\n<p>구현 세부 정보를 숨기는 일반 인터페이스를 지정하는 행위를 추상화라고 한다</p>\n<p>한국말로 들어도 이해가 잘 되지 않는다</p>\n<p>좀 더 쉽게 예시를 통해 알아보도록 하자</p>\n<p>우리가 차를 운전할 때 <strong>인터페이스</strong>를 사용하는데 여기서 <strong>인터페이스</strong>란 페달, 버튼, 스티어링 휠(핸들) 등을 의미하며 이는 차량 제조사에 의해 노출되어 있다(볼 수 있다)</p>\n<p>우리는 이런 <strong>인터페이스</strong>를 활용해 차를 운전할 수 있다</p>\n<p>하지만 우리는 차량의 내부에 대한 정보는 알지 못한다</p>\n<p>즉, 엑셀을 밟았을 때 어떤 방식을 통해 차량이 가속하는지 핸들을 돌리면 어떤 방식으로 차량이 방향전환을 하는지 등 구현 세부 정보는 노출되어 있지 않다</p>\n<p>이를 <code class=\"language-text\">Abstraction</code>이라고 한다</p>\n<p>이제 코드를 보며 어떻게 추상화가 이뤄지는지 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BetterArray</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> items<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>itmes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>itmes<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>itmes<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span>itemToDelete<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> itemToDelete<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">modifyItem</span><span class=\"token punctuation\">(</span>itemToChange<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> newValue<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>itemToChange<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newValue\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메서드들의 이름을 보면 간단하게 어떻게 배열을 다루는 메서드인지 알 수 있다</p>\n<p>하지만 이를 사용할 때 <code class=\"language-text\">filter</code>, <code class=\"language-text\">indexOf</code> 등의 함수를 알 필요는 없다</p>\n<p>우리는 메서드들을 통해 추상화를 이뤄냈다</p>\n<h2 id=\"polymorphism다형성\" style=\"position:relative;\"><a href=\"#polymorphism%EB%8B%A4%ED%98%95%EC%84%B1\" aria-label=\"polymorphism다형성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Polymorphism(다형성)</h2>\n<p><code class=\"language-text\">poli(multiple) + morphos(shape, form)</code></p>\n<p>즉 여러개의 형태라는 뜻인데 이는 <code class=\"language-text\">Inheritance</code>와 연관이 된다</p>\n<p>우리는 부모의 것을 상속 받을 수 있다는 것을 안다</p>\n<p>하지만 부모 클래스에서의 메서드를 오버라이딩(재정의)할 수 있는데 오버라이딩에도 규칙이 있다</p>\n<p>예를 들면 return value type이 string이라면 오버라이딩한 메서드도 return value type이 string이어야 한다</p>\n<p>즉, 클래스의 핵심은 그대로 있으면서 모양과 모습이 달라지는 것이다(multiple shape)</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hi !'</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">sayBye</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'✌'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Korean</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// overwriting</span>\n  <span class=\"token keyword\">public</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'안녕 !'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">American</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 보면 미국인과 한국인의 <code class=\"language-text\">sayHi</code> 메서드가 다른 값을 반환하지만 그럼에도 불구하고반환값은 동일하게 <code class=\"language-text\">string</code>이다</p>\n<p>이를 <code class=\"language-text\">Polymorphism</code>이라고 한다</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>*references</h2>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=IeLWSKq0xIQ&#x26;t=27s&#x26;ab_channel=%EB%85%B8%EB%A7%88%EB%93%9C%EC%BD%94%EB%8D%94NomadCoders\">개발자 교양필수? 객체지향 개념정리 10분컷.</a></li>\n</ol>","frontmatter":{"title":"OOP(객체지향형 프로그래밍)에 대하여","date":"May 18, 2022"}}},"pageContext":{"slug":"/dev/what-is-oop/","previous":{"fields":{"slug":"/flutter/oop-in-flutter/"},"frontmatter":{"title":"플러터의 객체지향프로그래밍(OOP)"}},"next":{"fields":{"slug":"/typescript/typescript-syntax/"},"frontmatter":{"title":"typescript 기초"}}}}}